
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005488  08005488  00015488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ec  080054ec  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080054f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000874  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008f4  200008f4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012747  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6b  00000000  00000000  000327f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00035268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  00036088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267cb  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011dfa  00000000  00000000  0005d54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7610  00000000  00000000  0006f345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156955  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e34  00000000  00000000  001569a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005470 	.word	0x08005470

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08005470 	.word	0x08005470

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f001 f8a0 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f80e 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f91c 	bl	8000df8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000bc0:	f000 f874 	bl	8000cac <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bc4:	f000 f8c0 	bl	8000d48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bc8:	f000 f8e8 	bl	8000d9c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  ControlFSM_init();
 8000bcc:	f000 fd4e 	bl	800166c <ControlFSM_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ControlFSM_update();
 8000bd0:	f000 fd7c 	bl	80016cc <ControlFSM_update>
  {
 8000bd4:	e7fc      	b.n	8000bd0 <main+0x20>
	...

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b094      	sub	sp, #80	; 0x50
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	2230      	movs	r2, #48	; 0x30
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 ffcc 	bl	8004b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemClock_Config+0xcc>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <SystemClock_Config+0xcc>)
 8000c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemClock_Config+0xcc>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <SystemClock_Config+0xd0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a21      	ldr	r2, [pc, #132]	; (8000ca8 <SystemClock_Config+0xd0>)
 8000c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <SystemClock_Config+0xd0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c4c:	23a8      	movs	r3, #168	; 0xa8
 8000c4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c54:	2307      	movs	r3, #7
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0320 	add.w	r3, r7, #32
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fc0b 	bl	8003478 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c68:	f000 f980 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2302      	movs	r3, #2
 8000c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2105      	movs	r1, #5
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fe6c 	bl	8003968 <HAL_RCC_ClockConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c96:	f000 f969 	bl	8000f6c <Error_Handler>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	3750      	adds	r7, #80	; 0x50
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <MX_ETH_Init+0x88>)
 8000cb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cc4:	22e1      	movs	r2, #225	; 0xe1
 8000cc6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cdc:	4a16      	ldr	r2, [pc, #88]	; (8000d38 <MX_ETH_Init+0x8c>)
 8000cde:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_ETH_Init+0x84>)
 8000ce2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ce6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <MX_ETH_Init+0x90>)
 8000cec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MX_ETH_Init+0x94>)
 8000cf2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000cf4:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cf6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cfa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <MX_ETH_Init+0x84>)
 8000cfe:	f001 fd7f 	bl	8002800 <HAL_ETH_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d08:	f000 f930 	bl	8000f6c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d0c:	2238      	movs	r2, #56	; 0x38
 8000d0e:	2100      	movs	r1, #0
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_ETH_Init+0x98>)
 8000d12:	f003 ff37 	bl	8004b84 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_ETH_Init+0x98>)
 8000d18:	2221      	movs	r2, #33	; 0x21
 8000d1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_ETH_Init+0x98>)
 8000d1e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000d22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_ETH_Init+0x98>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000214 	.word	0x20000214
 8000d34:	40028000 	.word	0x40028000
 8000d38:	20000814 	.word	0x20000814
 8000d3c:	20000174 	.word	0x20000174
 8000d40:	200000d4 	.word	0x200000d4
 8000d44:	2000009c 	.word	0x2000009c

08000d48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART3_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART3_UART_Init+0x4c>)
 8000d80:	f003 f812 	bl	8003da8 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f000 f8ef 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200002c4 	.word	0x200002c4
 8000d98:	40004800 	.word	0x40004800

08000d9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000da6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	2204      	movs	r2, #4
 8000dac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db0:	2202      	movs	r2, #2
 8000db2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de0:	f002 fa2d 	bl	800323e <HAL_PCD_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 f8bf 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000308 	.word	0x20000308

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	; 0x30
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b4b      	ldr	r3, [pc, #300]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a4a      	ldr	r2, [pc, #296]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b48      	ldr	r3, [pc, #288]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b44      	ldr	r3, [pc, #272]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b41      	ldr	r3, [pc, #260]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a3c      	ldr	r2, [pc, #240]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b36      	ldr	r3, [pc, #216]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a35      	ldr	r2, [pc, #212]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a2e      	ldr	r2, [pc, #184]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	; (8000f5c <MX_GPIO_Init+0x164>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ebc:	4828      	ldr	r0, [pc, #160]	; (8000f60 <MX_GPIO_Init+0x168>)
 8000ebe:	f002 f98b 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4827      	ldr	r0, [pc, #156]	; (8000f64 <MX_GPIO_Init+0x16c>)
 8000ec8:	f002 f986 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4821      	ldr	r0, [pc, #132]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000ee4:	f001 ffb4 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ee8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4817      	ldr	r0, [pc, #92]	; (8000f60 <MX_GPIO_Init+0x168>)
 8000f02:	f001 ffa5 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_GPIO_Init+0x16c>)
 8000f1e:	f001 ff97 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0x16c>)
 8000f36:	f001 ff8b 	bl	8002e50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_GPIO_Init+0x170>)
 8000f50:	f001 ff7e 	bl	8002e50 <HAL_GPIO_Init>

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	; 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40020800 	.word	0x40020800

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_ADC_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d127      	bne.n	800103a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a15      	ldr	r2, [pc, #84]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_ADC_MspInit+0x80>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_ADC_MspInit+0x80>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_ADC_MspInit+0x84>)
 8001036:	f001 ff0b 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40012000 	.word	0x40012000
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a55      	ldr	r2, [pc, #340]	; (80011c4 <HAL_ETH_MspInit+0x174>)
 800106e:	4293      	cmp	r3, r2
 8001070:	f040 80a4 	bne.w	80011bc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
 8001078:	4b53      	ldr	r3, [pc, #332]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a52      	ldr	r2, [pc, #328]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b50      	ldr	r3, [pc, #320]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	623b      	str	r3, [r7, #32]
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	4a4b      	ldr	r2, [pc, #300]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 800109a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800109e:	6313      	str	r3, [r2, #48]	; 0x30
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	4b3e      	ldr	r3, [pc, #248]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a2f      	ldr	r2, [pc, #188]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 800110a:	f043 0302 	orr.w	r3, r3, #2
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 8001126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_ETH_MspInit+0x178>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001138:	2332      	movs	r3, #50	; 0x32
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001148:	230b      	movs	r3, #11
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	481e      	ldr	r0, [pc, #120]	; (80011cc <HAL_ETH_MspInit+0x17c>)
 8001154:	f001 fe7c 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001158:	2386      	movs	r3, #134	; 0x86
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001168:	230b      	movs	r3, #11
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4817      	ldr	r0, [pc, #92]	; (80011d0 <HAL_ETH_MspInit+0x180>)
 8001174:	f001 fe6c 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <HAL_ETH_MspInit+0x184>)
 8001196:	f001 fe5b 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800119a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ac:	230b      	movs	r3, #11
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	4619      	mov	r1, r3
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <HAL_ETH_MspInit+0x188>)
 80011b8:	f001 fe4a 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3738      	adds	r7, #56	; 0x38
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40028000 	.word	0x40028000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40021800 	.word	0x40021800

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_UART_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12c      	bne.n	8001258 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001236:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_UART_MspInit+0x8c>)
 8001254:	f001 fdfc 	bl	8002e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40004800 	.word	0x40004800
 8001264:	40023800 	.word	0x40023800
 8001268:	40020c00 	.word	0x40020c00

0800126c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800128c:	d13f      	bne.n	800130e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_PCD_MspInit+0xac>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_PCD_MspInit+0xac>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_PCD_MspInit+0xac>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012bc:	230a      	movs	r3, #10
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <HAL_PCD_MspInit+0xb0>)
 80012c8:	f001 fdc2 	bl	8002e50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480e      	ldr	r0, [pc, #56]	; (800131c <HAL_PCD_MspInit+0xb0>)
 80012e2:	f001 fdb5 	bl	8002e50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_PCD_MspInit+0xac>)
 80012e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_PCD_MspInit+0xac>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6353      	str	r3, [r2, #52]	; 0x34
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_PCD_MspInit+0xac>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_PCD_MspInit+0xac>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_PCD_MspInit+0xac>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136c:	f000 fd16 	bl	8001d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10e      	bne.n	80013a2 <BSP_LED_Init+0x2e>
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <BSP_LED_Init+0x94>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <BSP_LED_Init+0x94>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <BSP_LED_Init+0x94>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	e00d      	b.n	80013be <BSP_LED_Init+0x4a>
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <BSP_LED_Init+0x94>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <BSP_LED_Init+0x94>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <BSP_LED_Init+0x94>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <BSP_LED_Init+0x98>)
 80013c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <BSP_LED_Init+0x9c>)
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	f107 0214 	add.w	r2, r7, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fd34 	bl	8002e50 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <BSP_LED_Init+0x9c>)
 80013ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <BSP_LED_Init+0x98>)
 80013f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f8:	2200      	movs	r2, #0
 80013fa:	4619      	mov	r1, r3
 80013fc:	f001 feec 	bl	80031d8 <HAL_GPIO_WritePin>
}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	08005490 	.word	0x08005490
 8001410:	20000000 	.word	0x20000000

08001414 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <BSP_LED_On+0x2c>)
 8001422:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <BSP_LED_On+0x30>)
 800142a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142e:	2201      	movs	r2, #1
 8001430:	4619      	mov	r1, r3
 8001432:	f001 fed1 	bl	80031d8 <HAL_GPIO_WritePin>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000
 8001444:	08005490 	.word	0x08005490

08001448 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <BSP_LED_Off+0x2c>)
 8001456:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <BSP_LED_Off+0x30>)
 800145e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	f001 feb7 	bl	80031d8 <HAL_GPIO_WritePin>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	08005490 	.word	0x08005490

0800147c <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <BSP_LED_Toggle+0x2c>)
 800148a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4906      	ldr	r1, [pc, #24]	; (80014ac <BSP_LED_Toggle+0x30>)
 8001492:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f001 feb6 	bl	800320a <HAL_GPIO_TogglePin>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000000 	.word	0x20000000
 80014ac:	08005490 	.word	0x08005490

080014b0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <BSP_PB_Init+0xa4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <BSP_PB_Init+0xa4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <BSP_PB_Init+0xa4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d112      	bne.n	8001508 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80014e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ec:	2302      	movs	r3, #2
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <BSP_PB_Init+0xa8>)
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	f107 020c 	add.w	r2, r7, #12
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fca4 	bl	8002e50 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d11d      	bne.n	800154a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001518:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800151c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <BSP_PB_Init+0xa8>)
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fc8f 	bl	8002e50 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001532:	2328      	movs	r3, #40	; 0x28
 8001534:	b25b      	sxtb	r3, r3
 8001536:	2200      	movs	r2, #0
 8001538:	210f      	movs	r1, #15
 800153a:	4618      	mov	r0, r3
 800153c:	f001 f929 	bl	8002792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001540:	2328      	movs	r3, #40	; 0x28
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f001 f940 	bl	80027ca <HAL_NVIC_EnableIRQ>
  }
}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	2000000c 	.word	0x2000000c

0800155c <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <BSP_PB_GetState+0x28>)
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fe17 	bl	80031a8 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000000c 	.word	0x2000000c

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f003 faba 	bl	8004b30 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20030000 	.word	0x20030000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	2000081c 	.word	0x2000081c
 80015f0:	200008f8 	.word	0x200008f8

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001642:	f7ff ffd7 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f003 fa79 	bl	8004b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fab1 	bl	8000bb0 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001650:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800165c:	080054f4 	.word	0x080054f4
  ldr r2, =_sbss
 8001660:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001664:	200008f4 	.word	0x200008f4

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <ControlFSM_init>:
int16_t Temp = 0;

bool flagButton = false;


void ControlFSM_init(void){
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	/* Initialize BSP Led for LED */
	delayInit(&Timer_Alarma, Delay_Alarma);
 8001670:	21c8      	movs	r1, #200	; 0xc8
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <ControlFSM_init+0x54>)
 8001674:	f000 f9d6 	bl	8001a24 <delayInit>
	delayInit(&Timer_Temp, Muestreo_Temp);
 8001678:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800167c:	4811      	ldr	r0, [pc, #68]	; (80016c4 <ControlFSM_init+0x58>)
 800167e:	f000 f9d1 	bl	8001a24 <delayInit>


	/* Inicializo todos los LEDS en OFF*/
	BSP_LED_Init(LED1);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff fe76 	bl	8001374 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fe73 	bl	8001374 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800168e:	2002      	movs	r0, #2
 8001690:	f7ff fe70 	bl	8001374 <BSP_LED_Init>
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001694:	2100      	movs	r1, #0
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff ff0a 	bl	80014b0 <BSP_PB_Init>


	BSP_LED_Off(LED1);
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fed3 	bl	8001448 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fed0 	bl	8001448 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80016a8:	2002      	movs	r0, #2
 80016aa:	f7ff fecd 	bl	8001448 <BSP_LED_Off>

	curr_state = LECTURA_TEMP;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <ControlFSM_init+0x5c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]

	debounceFSM_init();
 80016b4:	f000 f90e 	bl	80018d4 <debounceFSM_init>
	SensorTemp_Init();
 80016b8:	f000 fa70 	bl	8001b9c <SensorTemp_Init>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000830 	.word	0x20000830
 80016c4:	20000824 	.word	0x20000824
 80016c8:	20000820 	.word	0x20000820

080016cc <ControlFSM_update>:


void ControlFSM_update(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	debounceFSM_update();
 80016d0:	f000 f91a 	bl	8001908 <debounceFSM_update>
	switch (curr_state) {
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <ControlFSM_update+0xe4>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d03e      	beq.n	800175a <ControlFSM_update+0x8e>
 80016dc:	2b02      	cmp	r3, #2
 80016de:	dc62      	bgt.n	80017a6 <ControlFSM_update+0xda>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <ControlFSM_update+0x1e>
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d010      	beq.n	800170a <ControlFSM_update+0x3e>
 80016e8:	e05d      	b.n	80017a6 <ControlFSM_update+0xda>
		case LECTURA_TEMP:
			if (delayReadState(&Timer_Temp)) {
 80016ea:	4832      	ldr	r0, [pc, #200]	; (80017b4 <ControlFSM_update+0xe8>)
 80016ec:	f000 f9b8 	bl	8001a60 <delayReadState>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <ControlFSM_update+0x36>
				Temp=SensorTemp_Read();
 80016f6:	f000 fa5b 	bl	8001bb0 <SensorTemp_Read>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <ControlFSM_update+0xec>)
 8001700:	801a      	strh	r2, [r3, #0]
			}
			curr_state = DEFINICION_ESTADO;
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <ControlFSM_update+0xe4>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
			break;
 8001708:	e050      	b.n	80017ac <ControlFSM_update+0xe0>

		case DEFINICION_ESTADO:
			if (readKey()) {
 800170a:	f000 f979 	bl	8001a00 <readKey>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <ControlFSM_update+0x64>
				if (flagButton) {
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <ControlFSM_update+0xf0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <ControlFSM_update+0x58>
					flagButton = false;
 800171c:	4b27      	ldr	r3, [pc, #156]	; (80017bc <ControlFSM_update+0xf0>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e005      	b.n	8001730 <ControlFSM_update+0x64>
				}else {
					flagButton = true;
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <ControlFSM_update+0xf0>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
					Estado = Estado_Critico;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <ControlFSM_update+0xf4>)
 800172c:	2204      	movs	r2, #4
 800172e:	701a      	strb	r2, [r3, #0]
				}
			}
			if (!flagButton) {
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <ControlFSM_update+0xf0>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	f083 0301 	eor.w	r3, r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <ControlFSM_update+0x86>
				Estado = Definir_Estado(Temp);
 800173e:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <ControlFSM_update+0xec>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f83f 	bl	80017c8 <Definir_Estado>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <ControlFSM_update+0xf4>)
 8001750:	701a      	strb	r2, [r3, #0]
			}
			curr_state = ACTIVACION_ESTADO;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <ControlFSM_update+0xe4>)
 8001754:	2202      	movs	r2, #2
 8001756:	701a      	strb	r2, [r3, #0]
			break;
 8001758:	e028      	b.n	80017ac <ControlFSM_update+0xe0>

		case ACTIVACION_ESTADO:
			switch (Estado) {
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <ControlFSM_update+0xf4>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d81c      	bhi.n	800179c <ControlFSM_update+0xd0>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <ControlFSM_update+0x9c>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001797 	.word	0x08001797
 800176c:	08001791 	.word	0x08001791
 8001770:	0800178b 	.word	0x0800178b
 8001774:	08001785 	.word	0x08001785
 8001778:	0800177d 	.word	0x0800177d
				case Estado_Critico:
					Activar_Estado_Critico(&Timer_Alarma);
 800177c:	4811      	ldr	r0, [pc, #68]	; (80017c4 <ControlFSM_update+0xf8>)
 800177e:	f000 f84f 	bl	8001820 <Activar_Estado_Critico>
					break;
 8001782:	e00c      	b.n	800179e <ControlFSM_update+0xd2>
				case Estado_Alto:
					Activar_Estado_Alto();
 8001784:	f000 f865 	bl	8001852 <Activar_Estado_Alto>
					break;
 8001788:	e009      	b.n	800179e <ControlFSM_update+0xd2>
				case Estado_Medio:
					Activar_Estado_Medio();
 800178a:	f000 f872 	bl	8001872 <Activar_Estado_Medio>
					break;
 800178e:	e006      	b.n	800179e <ControlFSM_update+0xd2>
				case Estado_Bajo:
					Activar_Estado_Bajo();
 8001790:	f000 f87f 	bl	8001892 <Activar_Estado_Bajo>
					break;
 8001794:	e003      	b.n	800179e <ControlFSM_update+0xd2>
				case Estado_Bajo_Cero:
					Activar_Estado_Bajo_Cero();
 8001796:	f000 f88c 	bl	80018b2 <Activar_Estado_Bajo_Cero>
					break;
 800179a:	e000      	b.n	800179e <ControlFSM_update+0xd2>
				default:
					break;
 800179c:	bf00      	nop
			}
			curr_state = LECTURA_TEMP;
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <ControlFSM_update+0xe4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
			break;
 80017a4:	e002      	b.n	80017ac <ControlFSM_update+0xe0>
		default:
				//Si algo modificó la variable estadoActual
				// a un estado no válido llevo la MEF a un
				// lugar seguro, por ejemplo, la reinicio:
				//controlDeErrores();
				ControlFSM_init();
 80017a6:	f7ff ff61 	bl	800166c <ControlFSM_init>
				break;
 80017aa:	bf00      	nop
	}
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000820 	.word	0x20000820
 80017b4:	20000824 	.word	0x20000824
 80017b8:	2000083e 	.word	0x2000083e
 80017bc:	20000840 	.word	0x20000840
 80017c0:	2000083c 	.word	0x2000083c
 80017c4:	20000830 	.word	0x20000830

080017c8 <Definir_Estado>:





uint8_t Definir_Estado(int16_t Temp){
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	uint8_t Estado = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
	if (Temp>=Min_Temp_Critica) {
 80017d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017da:	2b27      	cmp	r3, #39	; 0x27
 80017dc:	dd02      	ble.n	80017e4 <Definir_Estado+0x1c>
		Estado = Estado_Critico;
 80017de:	2304      	movs	r3, #4
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e016      	b.n	8001812 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Alta) {
 80017e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e8:	2b1d      	cmp	r3, #29
 80017ea:	dd02      	ble.n	80017f2 <Definir_Estado+0x2a>
		Estado = Estado_Alto;
 80017ec:	2303      	movs	r3, #3
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e00f      	b.n	8001812 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Media) {
 80017f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f6:	2b0e      	cmp	r3, #14
 80017f8:	dd02      	ble.n	8001800 <Definir_Estado+0x38>
		Estado = Estado_Medio;
 80017fa:	2302      	movs	r3, #2
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e008      	b.n	8001812 <Definir_Estado+0x4a>
	} else if (Temp>=Min_Temp_Baja) {
 8001800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db02      	blt.n	800180e <Definir_Estado+0x46>
		Estado = Estado_Bajo;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <Definir_Estado+0x4a>
	} else {
		Estado = Estado_Bajo_Cero;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
	}

	return Estado;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <Activar_Estado_Critico>:


void Activar_Estado_Critico (delay_t * delay){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	if (delayReadState(delay)) {
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f919 	bl	8001a60 <delayReadState>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00a      	beq.n	800184a <Activar_Estado_Critico+0x2a>
		BSP_LED_Toggle(LED1);
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fe21 	bl	800147c <BSP_LED_Toggle>
		BSP_LED_Toggle(LED2);
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff fe1e 	bl	800147c <BSP_LED_Toggle>
		BSP_LED_Toggle(LED3);
 8001840:	2002      	movs	r0, #2
 8001842:	f7ff fe1b 	bl	800147c <BSP_LED_Toggle>
		Buzzer_toggle();
 8001846:	f000 f99f 	bl	8001b88 <Buzzer_toggle>
	}

}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <Activar_Estado_Alto>:
void Activar_Estado_Alto(void){
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fddc 	bl	8001414 <BSP_LED_On>
	BSP_LED_On(LED2);
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff fdd9 	bl	8001414 <BSP_LED_On>
	BSP_LED_On(LED3);
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff fdd6 	bl	8001414 <BSP_LED_On>
	Buzzer_write(GPIO_PIN_RESET);
 8001868:	2000      	movs	r0, #0
 800186a:	f000 f97b 	bl	8001b64 <Buzzer_write>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}

08001872 <Activar_Estado_Medio>:
void Activar_Estado_Medio(void){
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff fdcc 	bl	8001414 <BSP_LED_On>
	BSP_LED_On(LED2);
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff fdc9 	bl	8001414 <BSP_LED_On>
	BSP_LED_Off(LED3);
 8001882:	2002      	movs	r0, #2
 8001884:	f7ff fde0 	bl	8001448 <BSP_LED_Off>
	Buzzer_write(GPIO_PIN_RESET);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f96b 	bl	8001b64 <Buzzer_write>
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}

08001892 <Activar_Estado_Bajo>:
void Activar_Estado_Bajo(void){
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff fdbc 	bl	8001414 <BSP_LED_On>
	BSP_LED_Off(LED2);
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fdd3 	bl	8001448 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80018a2:	2002      	movs	r0, #2
 80018a4:	f7ff fdd0 	bl	8001448 <BSP_LED_Off>
	Buzzer_write(GPIO_PIN_RESET);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 f95b 	bl	8001b64 <Buzzer_write>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <Activar_Estado_Bajo_Cero>:
void Activar_Estado_Bajo_Cero(void){
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED1);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fdc6 	bl	8001448 <BSP_LED_Off>
	BSP_LED_Off(LED2);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fdc3 	bl	8001448 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f7ff fdc0 	bl	8001448 <BSP_LED_Off>
	Buzzer_write(GPIO_PIN_SET);
 80018c8:	2001      	movs	r0, #1
 80018ca:	f000 f94b 	bl	8001b64 <Buzzer_write>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <debounceFSM_init>:
// P4_2 - Variable de estado (global)
static debounceState_t curr_state;

static bool_t pending_pressed;

void debounceFSM_init(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	curr_state = BUTTON_UP;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <debounceFSM_init+0x28>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	BSP_LED_Off(LED1);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fdb2 	bl	8001448 <BSP_LED_Off>
	BSP_LED_Off(LED3);
 80018e4:	2002      	movs	r0, #2
 80018e6:	f7ff fdaf 	bl	8001448 <BSP_LED_Off>
	delayInit(&bounce_delay, TIME_DEBOUNCE);
 80018ea:	2128      	movs	r1, #40	; 0x28
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <debounceFSM_init+0x2c>)
 80018ee:	f000 f899 	bl	8001a24 <delayInit>
	pending_pressed = false;
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <debounceFSM_init+0x30>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000850 	.word	0x20000850
 8001900:	20000844 	.word	0x20000844
 8001904:	20000851 	.word	0x20000851

08001908 <debounceFSM_update>:


void debounceFSM_update(void) {
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	switch (curr_state) {
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <debounceFSM_update+0xc8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d851      	bhi.n	80019b8 <debounceFSM_update+0xb0>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <debounceFSM_update+0x14>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	0800192d 	.word	0x0800192d
 8001920:	08001947 	.word	0x08001947
 8001924:	08001973 	.word	0x08001973
 8001928:	0800198d 	.word	0x0800198d
	case BUTTON_UP:
		if (BSP_PB_GetState(BUTTON_USER) == BOT_OFF) {
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fe15 	bl	800155c <BSP_PB_GetState>
 8001932:	4603      	mov	r3, r0
 8001934:	2b01      	cmp	r3, #1
 8001936:	d142      	bne.n	80019be <debounceFSM_update+0xb6>
			delayReadState(&bounce_delay);
 8001938:	4826      	ldr	r0, [pc, #152]	; (80019d4 <debounceFSM_update+0xcc>)
 800193a:	f000 f891 	bl	8001a60 <delayReadState>
			curr_state = BUTTON_FALLING;
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <debounceFSM_update+0xc8>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001944:	e03b      	b.n	80019be <debounceFSM_update+0xb6>

	case BUTTON_FALLING:
		if (delayReadState(&bounce_delay)) {
 8001946:	4823      	ldr	r0, [pc, #140]	; (80019d4 <debounceFSM_update+0xcc>)
 8001948:	f000 f88a 	bl	8001a60 <delayReadState>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d037      	beq.n	80019c2 <debounceFSM_update+0xba>
			if (BSP_PB_GetState(BUTTON_USER) == BOT_OFF) {
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fe02 	bl	800155c <BSP_PB_GetState>
 8001958:	4603      	mov	r3, r0
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <debounceFSM_update+0x62>
				curr_state = BUTTON_DOWN;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <debounceFSM_update+0xc8>)
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 8001964:	f000 f838 	bl	80019d8 <buttonPressed>
			} else {
				curr_state = BUTTON_UP;
			}
		}
		break;
 8001968:	e02b      	b.n	80019c2 <debounceFSM_update+0xba>
				curr_state = BUTTON_UP;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <debounceFSM_update+0xc8>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
		break;
 8001970:	e027      	b.n	80019c2 <debounceFSM_update+0xba>

	case BUTTON_DOWN:
		if (BSP_PB_GetState(BUTTON_USER) == BOT_ON) {
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fdf2 	bl	800155c <BSP_PB_GetState>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d123      	bne.n	80019c6 <debounceFSM_update+0xbe>
			delayReadState(&bounce_delay);
 800197e:	4815      	ldr	r0, [pc, #84]	; (80019d4 <debounceFSM_update+0xcc>)
 8001980:	f000 f86e 	bl	8001a60 <delayReadState>
			curr_state = BUTTON_RAISING;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <debounceFSM_update+0xc8>)
 8001986:	2203      	movs	r2, #3
 8001988:	701a      	strb	r2, [r3, #0]
		}
		break;
 800198a:	e01c      	b.n	80019c6 <debounceFSM_update+0xbe>

	case BUTTON_RAISING:
		if (delayReadState(&bounce_delay)) {
 800198c:	4811      	ldr	r0, [pc, #68]	; (80019d4 <debounceFSM_update+0xcc>)
 800198e:	f000 f867 	bl	8001a60 <delayReadState>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d018      	beq.n	80019ca <debounceFSM_update+0xc2>
			if (BSP_PB_GetState(BUTTON_USER) == BOT_ON) {
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fddf 	bl	800155c <BSP_PB_GetState>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <debounceFSM_update+0xa8>
				curr_state = BUTTON_UP;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <debounceFSM_update+0xc8>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 80019aa:	f000 f821 	bl	80019f0 <buttonReleased>
			} else {
				curr_state = BUTTON_DOWN;
			}
		}
		break;
 80019ae:	e00c      	b.n	80019ca <debounceFSM_update+0xc2>
				curr_state = BUTTON_DOWN;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <debounceFSM_update+0xc8>)
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
		break;
 80019b6:	e008      	b.n	80019ca <debounceFSM_update+0xc2>

	default:
		//Si algo modificó la variable estadoActual
		// a un estado no válido llevo la MEF a un
		// lugar seguro, por ejemplo, la reinicio:
		debounceFSM_init();
 80019b8:	f7ff ff8c 	bl	80018d4 <debounceFSM_init>
		break;
 80019bc:	e006      	b.n	80019cc <debounceFSM_update+0xc4>
		break;
 80019be:	bf00      	nop
 80019c0:	e004      	b.n	80019cc <debounceFSM_update+0xc4>
		break;
 80019c2:	bf00      	nop
 80019c4:	e002      	b.n	80019cc <debounceFSM_update+0xc4>
		break;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <debounceFSM_update+0xc4>
		break;
 80019ca:	bf00      	nop
	}
}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000850 	.word	0x20000850
 80019d4:	20000844 	.word	0x20000844

080019d8 <buttonPressed>:


static void buttonPressed(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED1);
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fd4d 	bl	800147c <BSP_LED_Toggle>
	pending_pressed = true;
 80019e2:	4b02      	ldr	r3, [pc, #8]	; (80019ec <buttonPressed+0x14>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000851 	.word	0x20000851

080019f0 <buttonReleased>:


static void buttonReleased(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	BSP_LED_Toggle(LED3);
 80019f4:	2002      	movs	r0, #2
 80019f6:	f7ff fd41 	bl	800147c <BSP_LED_Toggle>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <readKey>:

bool readKey(void){
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
	bool_t pending_aux;

	pending_aux = pending_pressed;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <readKey+0x20>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
	pending_pressed = false;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <readKey+0x20>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]

	return pending_aux;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000851 	.word	0x20000851

08001a24 <delayInit>:
#define MAX_duration 3600000 //1 hora


/*delayInit debe cargar el valor de duración del retardo en la estructura, en el campo correspondiente.
 No debe iniciar el conteo del retardo. Debe inicializar el flag running en `false´.*/
void delayInit( delay_t * delay, tick_t duration ){
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	if (delay!=0 && duration<MAX_duration && duration>0) {
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <delayInit+0x2c>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <delayInit+0x38>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d209      	bcs.n	8001a50 <delayInit+0x2c>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <delayInit+0x2c>
		delay->duration = duration;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	605a      	str	r2, [r3, #4]
		delay->running = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	721a      	strb	r2, [r3, #8]
	}else{
		while(1);
	}

}
 8001a4e:	e000      	b.n	8001a52 <delayInit+0x2e>
		while(1);
 8001a50:	e7fe      	b.n	8001a50 <delayInit+0x2c>
}
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	0036ee80 	.word	0x0036ee80

08001a60 <delayReadState>:


/*La siguiente funcion debe verificar el estado del flag running. si es false, debe tomar marca de tiempo y cambiar
 running a ‘true’. Si es true, debe hacer la cuenta para saber si el tiempo del retardo se cumplió o no y devolver
 'true' o 'false' respectivamente. */
bool_t delayReadState( delay_t * delay ){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if (delay!=0){
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d023      	beq.n	8001ab6 <delayReadState+0x56>
		if (!delay->running){
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7a1b      	ldrb	r3, [r3, #8]
 8001a72:	f083 0301 	eor.w	r3, r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00a      	beq.n	8001a92 <delayReadState+0x32>
			delay->startTime=HAL_GetTick();
 8001a7c:	f000 f9a2 	bl	8001dc4 <HAL_GetTick>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]
			delay->running=1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	721a      	strb	r2, [r3, #8]
				return true;
			}else{
				return false;
			}
		}
		return false;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e012      	b.n	8001ab8 <delayReadState+0x58>
			if(HAL_GetTick()-delay->startTime >= delay->duration){
 8001a92:	f000 f997 	bl	8001dc4 <HAL_GetTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d304      	bcc.n	8001ab2 <delayReadState+0x52>
				delay->running=0;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	721a      	strb	r2, [r3, #8]
				return true;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e002      	b.n	8001ab8 <delayReadState+0x58>
				return false;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <delayReadState+0x58>
	}else{
		while(1);
 8001ab6:	e7fe      	b.n	8001ab6 <delayReadState+0x56>
	}
	return false;
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <uartInit>:
#define MAX_Size_String_UART 100 //Solo se enviara como maximo MAX_Size_String_UART caracteres

/* UART handler declaration */
UART_HandleTypeDef UartHandle;

bool uartInit(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
						  BE CAREFUL : Program 7 data bits + 1 parity bit in PC HyperTerminal
		  - Stop Bit    = One Stop bit
		  - Parity      = ODD parity
		  - BaudRate    = 9600 baud
		  - Hardware flow control disabled (RTS and CTS signals) */
	  UartHandle.Instance        = USARTx;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <uartInit+0x50>)
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <uartInit+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]

	  UartHandle.Init.BaudRate   = BaudVel;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <uartInit+0x50>)
 8001acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad0:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <uartInit+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <uartInit+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <uartInit+0x50>)
 8001ae0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001ae4:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <uartInit+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <uartInit+0x50>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <uartInit+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <uartInit+0x50>)
 8001afa:	f002 f955 	bl	8003da8 <HAL_UART_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <uartInit+0x48>
	  {
		return false;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <uartInit+0x4a>
	  }
	  return true;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000854 	.word	0x20000854
 8001b14:	40004800 	.word	0x40004800

08001b18 <uartSendString>:



void uartSendString(uint8_t * pstring){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	uint8_t * aux_string = pstring;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60fb      	str	r3, [r7, #12]
	uint8_t size_string = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	72fb      	strb	r3, [r7, #11]
	while(*aux_string != 0){
 8001b28:	e008      	b.n	8001b3c <uartSendString+0x24>
		size_string++;
 8001b2a:	7afb      	ldrb	r3, [r7, #11]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	72fb      	strb	r3, [r7, #11]
		aux_string++;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
		if (size_string>=MAX_Size_String_UART) {
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	2b63      	cmp	r3, #99	; 0x63
 8001b3a:	d804      	bhi.n	8001b46 <uartSendString+0x2e>
	while(*aux_string != 0){
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f2      	bne.n	8001b2a <uartSendString+0x12>
 8001b44:	e000      	b.n	8001b48 <uartSendString+0x30>
			break;
 8001b46:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&UartHandle, pstring , size_string, Timeout_UART);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4803      	ldr	r0, [pc, #12]	; (8001b60 <uartSendString+0x48>)
 8001b54:	f002 f975 	bl	8003e42 <HAL_UART_Transmit>
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000854 	.word	0x20000854

08001b64 <Buzzer_write>:
	GPIO_Buzzer_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_Buzzer_InitStruct.Pull = GPIO_NOPULL;
	GPIO_Buzzer_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(Buzzer_port, &GPIO_Buzzer_InitStruct);
}
void Buzzer_write(GPIO_PinState Estado){ // Se cambia el estado del buzzer
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Buzzer_port, Buzzer_pin, Estado);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	461a      	mov	r2, r3
 8001b72:	2108      	movs	r1, #8
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <Buzzer_write+0x20>)
 8001b76:	f001 fb2f 	bl	80031d8 <HAL_GPIO_WritePin>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40020000 	.word	0x40020000

08001b88 <Buzzer_toggle>:

void Buzzer_toggle(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(Buzzer_port, Buzzer_pin);
 8001b8c:	2108      	movs	r1, #8
 8001b8e:	4802      	ldr	r0, [pc, #8]	; (8001b98 <Buzzer_toggle+0x10>)
 8001b90:	f001 fb3b 	bl	800320a <HAL_GPIO_TogglePin>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40020000 	.word	0x40020000

08001b9c <SensorTemp_Init>:
#define MAX_VALUE_ADC 4095.0


ADC_HandleTypeDef hadc1;

void SensorTemp_Init(){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	uartInit();
 8001ba0:	f7ff ff8e 	bl	8001ac0 <uartInit>
	MX_ADC1_Init();
 8001ba4:	f000 f856 	bl	8001c54 <MX_ADC1_Init>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <SensorTemp_Read>:


int8_t SensorTemp_Read(void){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
	double AD_RES = 0;
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	HAL_ADC_Start(&hadc1);
 8001bc2:	4821      	ldr	r0, [pc, #132]	; (8001c48 <SensorTemp_Read+0x98>)
 8001bc4:	f000 f972 	bl	8001eac <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	481f      	ldr	r0, [pc, #124]	; (8001c48 <SensorTemp_Read+0x98>)
 8001bcc:	f000 fa40 	bl	8002050 <HAL_ADC_PollForConversion>
	double m =MAX_TEMP/MAX_VALUE_ADC;
 8001bd0:	a31b      	add	r3, pc, #108	; (adr r3, 8001c40 <SensorTemp_Read+0x90>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = m*HAL_ADC_GetValue(&hadc1) + MIN_TEMP;
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <SensorTemp_Read+0x98>)
 8001bdc:	f000 fac3 	bl	8002166 <HAL_ADC_GetValue>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fdc0 	bl	8000768 <__aeabi_ui2d>
 8001be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001bec:	f7fe fb50 	bl	8000290 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <SensorTemp_Read+0x9c>)
 8001bfe:	f7fe fc75 	bl	80004ec <__aeabi_dsub>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//AD_RES = HAL_ADC_GetValue(&hadc1);
	char buffer[10];
	sprintf((char*)buffer,"%02d - ",(int) AD_RES);
 8001c0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c0e:	f7fe fe25 	bl	800085c <__aeabi_d2iz>
 8001c12:	4602      	mov	r2, r0
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <SensorTemp_Read+0xa0>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 ffbb 	bl	8004b94 <siprintf>
	uartSendString((uint8_t *) buffer);
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff79 	bl	8001b18 <uartSendString>
	return AD_RES;
 8001c26:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c2a:	f7fe fe17 	bl	800085c <__aeabi_d2iz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	b25b      	sxtb	r3, r3
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	f3af 8000 	nop.w
 8001c40:	1e01e01e 	.word	0x1e01e01e
 8001c44:	3f8e01e0 	.word	0x3f8e01e0
 8001c48:	20000898 	.word	0x20000898
 8001c4c:	40240000 	.word	0x40240000
 8001c50:	08005488 	.word	0x08005488

08001c54 <MX_ADC1_Init>:



static void MX_ADC1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c66:	4b21      	ldr	r3, [pc, #132]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <MX_ADC1_Init+0x9c>)
 8001c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8e:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <MX_ADC1_Init+0xa0>)
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_ADC1_Init+0x98>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_ADC1_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_ADC1_Init+0x98>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <MX_ADC1_Init+0x98>)
 8001cb6:	f000 f8b5 	bl	8001e24 <HAL_ADC_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cc0:	f7ff f954 	bl	8000f6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_ADC1_Init+0x98>)
 8001cd6:	f000 fa53 	bl	8002180 <HAL_ADC_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ce0:	f7ff f944 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000898 	.word	0x20000898
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	0f000001 	.word	0x0f000001

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <HAL_Init+0x40>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0a      	ldr	r2, [pc, #40]	; (8001d38 <HAL_Init+0x40>)
 8001d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_Init+0x40>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 fd2b 	bl	800277c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f000 f808 	bl	8001d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2c:	f7ff f924 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_InitTick+0x54>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_InitTick+0x58>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fd43 	bl	80027e6 <HAL_SYSTICK_Config>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00e      	b.n	8001d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d80a      	bhi.n	8001d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d70:	2200      	movs	r2, #0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f000 fd0b 	bl	8002792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <HAL_InitTick+0x5c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000010 	.word	0x20000010
 8001d94:	20000018 	.word	0x20000018
 8001d98:	20000014 	.word	0x20000014

08001d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_IncTick+0x20>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_IncTick+0x24>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <HAL_IncTick+0x24>)
 8001dae:	6013      	str	r3, [r2, #0]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000018 	.word	0x20000018
 8001dc0:	200008e0 	.word	0x200008e0

08001dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetTick+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	200008e0 	.word	0x200008e0

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de4:	f7ff ffee 	bl	8001dc4 <HAL_GetTick>
 8001de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d005      	beq.n	8001e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_Delay+0x44>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e02:	bf00      	nop
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d8f7      	bhi.n	8001e04 <HAL_Delay+0x28>
  {
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000018 	.word	0x20000018

08001e24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e033      	b.n	8001ea2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff f8c0 	bl	8000fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d118      	bne.n	8001e94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e6a:	f023 0302 	bic.w	r3, r3, #2
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fab4 	bl	80023e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f023 0303 	bic.w	r3, r3, #3
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
 8001e92:	e001      	b.n	8001e98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Start+0x1a>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0b2      	b.n	800202c <HAL_ADC_Start+0x180>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d018      	beq.n	8001f0e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eec:	4b52      	ldr	r3, [pc, #328]	; (8002038 <HAL_ADC_Start+0x18c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_ADC_Start+0x190>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0c9a      	lsrs	r2, r3, #18
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f00:	e002      	b.n	8001f08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f9      	bne.n	8001f02 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d17a      	bne.n	8002012 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d007      	beq.n	8001f4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f5a:	d106      	bne.n	8001f6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f023 0206 	bic.w	r2, r3, #6
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
 8001f68:	e002      	b.n	8001f70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b31      	ldr	r3, [pc, #196]	; (8002040 <HAL_ADC_Start+0x194>)
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f84:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d12a      	bne.n	8001fe8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <HAL_ADC_Start+0x198>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d015      	beq.n	8001fc8 <HAL_ADC_Start+0x11c>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a29      	ldr	r2, [pc, #164]	; (8002048 <HAL_ADC_Start+0x19c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_Start+0x106>
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_ADC_Start+0x194>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a25      	ldr	r2, [pc, #148]	; (800204c <HAL_ADC_Start+0x1a0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d136      	bne.n	800202a <HAL_ADC_Start+0x17e>
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_ADC_Start+0x194>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d130      	bne.n	800202a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d129      	bne.n	800202a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	e020      	b.n	800202a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_ADC_Start+0x198>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d11b      	bne.n	800202a <HAL_ADC_Start+0x17e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d114      	bne.n	800202a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	e00b      	b.n	800202a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f043 0210 	orr.w	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	20000010 	.word	0x20000010
 800203c:	431bde83 	.word	0x431bde83
 8002040:	40012300 	.word	0x40012300
 8002044:	40012000 	.word	0x40012000
 8002048:	40012100 	.word	0x40012100
 800204c:	40012200 	.word	0x40012200

08002050 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206c:	d113      	bne.n	8002096 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800207c:	d10b      	bne.n	8002096 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e063      	b.n	800215e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002096:	f7ff fe95 	bl	8001dc4 <HAL_GetTick>
 800209a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800209c:	e021      	b.n	80020e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d01d      	beq.n	80020e2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <HAL_ADC_PollForConversion+0x6c>
 80020ac:	f7ff fe8a 	bl	8001dc4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d212      	bcs.n	80020e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d00b      	beq.n	80020e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e03d      	b.n	800215e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d1d6      	bne.n	800209e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0212 	mvn.w	r2, #18
 80020f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d123      	bne.n	800215c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d11f      	bne.n	800215c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002134:	2b00      	cmp	r3, #0
 8002136:	d111      	bne.n	800215c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e113      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x244>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	d925      	bls.n	80021f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68d9      	ldr	r1, [r3, #12]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	2207      	movs	r2, #7
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43da      	mvns	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	400a      	ands	r2, r1
 80021d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68d9      	ldr	r1, [r3, #12]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	4603      	mov	r3, r0
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4403      	add	r3, r0
 80021ea:	3b1e      	subs	r3, #30
 80021ec:	409a      	lsls	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	e022      	b.n	800223e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	461a      	mov	r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	2207      	movs	r2, #7
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	400a      	ands	r2, r1
 800221a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	4603      	mov	r3, r0
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4403      	add	r3, r0
 8002234:	409a      	lsls	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b06      	cmp	r3, #6
 8002244:	d824      	bhi.n	8002290 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	3b05      	subs	r3, #5
 8002258:	221f      	movs	r2, #31
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	400a      	ands	r2, r1
 8002266:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b05      	subs	r3, #5
 8002282:	fa00 f203 	lsl.w	r2, r0, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	635a      	str	r2, [r3, #52]	; 0x34
 800228e:	e04c      	b.n	800232a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d824      	bhi.n	80022e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b23      	subs	r3, #35	; 0x23
 80022aa:	221f      	movs	r2, #31
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43da      	mvns	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	400a      	ands	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b23      	subs	r3, #35	; 0x23
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
 80022e0:	e023      	b.n	800232a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b41      	subs	r3, #65	; 0x41
 80022f4:	221f      	movs	r2, #31
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	400a      	ands	r2, r1
 8002302:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	3b41      	subs	r3, #65	; 0x41
 800231e:	fa00 f203 	lsl.w	r2, r0, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800232a:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_ADC_ConfigChannel+0x250>)
 800232c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <HAL_ADC_ConfigChannel+0x254>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d10f      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1d8>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b12      	cmp	r3, #18
 800233e:	d10b      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_ADC_ConfigChannel+0x254>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d12b      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x23a>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_ADC_ConfigChannel+0x258>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <HAL_ADC_ConfigChannel+0x1f4>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b11      	cmp	r3, #17
 8002372:	d122      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <HAL_ADC_ConfigChannel+0x258>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d111      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_ADC_ConfigChannel+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_ConfigChannel+0x260>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	0c9a      	lsrs	r2, r3, #18
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023ac:	e002      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f9      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	40012300 	.word	0x40012300
 80023d4:	40012000 	.word	0x40012000
 80023d8:	10000012 	.word	0x10000012
 80023dc:	20000010 	.word	0x20000010
 80023e0:	431bde83 	.word	0x431bde83

080023e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ec:	4b79      	ldr	r3, [pc, #484]	; (80025d4 <ADC_Init+0x1f0>)
 80023ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	021a      	lsls	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800243c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <ADC_Init+0x1f4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800248a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	e00f      	b.n	80024e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0202 	bic.w	r2, r2, #2
 80024f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
 80024fc:	005a      	lsls	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800252e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	3b01      	subs	r3, #1
 800253c:	035a      	lsls	r2, r3, #13
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e007      	b.n	8002558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	3b01      	subs	r3, #1
 8002574:	051a      	lsls	r2, r3, #20
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800258c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800259a:	025a      	lsls	r2, r3, #9
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	029a      	lsls	r2, r3, #10
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012300 	.word	0x40012300
 80025d8:	0f000001 	.word	0x0f000001

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4907      	ldr	r1, [pc, #28]	; (8002678 <__NVIC_EnableIRQ+0x38>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100

0800267c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	6039      	str	r1, [r7, #0]
 8002686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	2b00      	cmp	r3, #0
 800268e:	db0a      	blt.n	80026a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	490c      	ldr	r1, [pc, #48]	; (80026c8 <__NVIC_SetPriority+0x4c>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	440b      	add	r3, r1
 80026a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a4:	e00a      	b.n	80026bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <__NVIC_SetPriority+0x50>)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	3b04      	subs	r3, #4
 80026b4:	0112      	lsls	r2, r2, #4
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	440b      	add	r3, r1
 80026ba:	761a      	strb	r2, [r3, #24]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f1c3 0307 	rsb	r3, r3, #7
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	bf28      	it	cs
 80026ee:	2304      	movcs	r3, #4
 80026f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3304      	adds	r3, #4
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d902      	bls.n	8002700 <NVIC_EncodePriority+0x30>
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3b03      	subs	r3, #3
 80026fe:	e000      	b.n	8002702 <NVIC_EncodePriority+0x32>
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002704:	f04f 32ff 	mov.w	r2, #4294967295
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002718:	f04f 31ff 	mov.w	r1, #4294967295
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	43d9      	mvns	r1, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	4313      	orrs	r3, r2
         );
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	; 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002748:	d301      	bcc.n	800274e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274a:	2301      	movs	r3, #1
 800274c:	e00f      	b.n	800276e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <SysTick_Config+0x40>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002756:	210f      	movs	r1, #15
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f7ff ff8e 	bl	800267c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <SysTick_Config+0x40>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SysTick_Config+0x40>)
 8002768:	2207      	movs	r2, #7
 800276a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000e010 	.word	0xe000e010

0800277c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff29 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a4:	f7ff ff3e 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff8e 	bl	80026d0 <NVIC_EncodePriority>
 80027b4:	4602      	mov	r2, r0
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff5d 	bl	800267c <__NVIC_SetPriority>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	4603      	mov	r3, r0
 80027d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff31 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffa2 	bl	8002738 <SysTick_Config>
 80027f4:	4603      	mov	r3, r0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e06c      	b.n	80028ec <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2223      	movs	r2, #35	; 0x23
 8002820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7fe fc13 	bl	8001050 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_ETH_Init+0xf4>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <HAL_ETH_Init+0xf4>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_ETH_Init+0xf4>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_ETH_Init+0xf8>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a2b      	ldr	r2, [pc, #172]	; (80028f8 <HAL_ETH_Init+0xf8>)
 800284c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002850:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <HAL_ETH_Init+0xf8>)
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	4927      	ldr	r1, [pc, #156]	; (80028f8 <HAL_ETH_Init+0xf8>)
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_ETH_Init+0xf8>)
 8002862:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7ff faa2 	bl	8001dc4 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002882:	e011      	b.n	80028a8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002884:	f7ff fa9e 	bl	8001dc4 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002892:	d909      	bls.n	80028a8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2204      	movs	r2, #4
 8002898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	22e0      	movs	r2, #224	; 0xe0
 80028a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e021      	b.n	80028ec <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e4      	bne.n	8002884 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f958 	bl	8002b70 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9ff 	bl	8002cc4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa55 	bl	8002d76 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	461a      	mov	r2, r3
 80028d2:	2100      	movs	r1, #0
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f9bd 	bl	8002c54 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2210      	movs	r2, #16
 80028e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40013800 	.word	0x40013800

080028fc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <ETH_SetMACConfig+0x15c>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	7c1b      	ldrb	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <ETH_SetMACConfig+0x28>
 800291e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002922:	e000      	b.n	8002926 <ETH_SetMACConfig+0x2a>
 8002924:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	7c5b      	ldrb	r3, [r3, #17]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <ETH_SetMACConfig+0x38>
 800292e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002932:	e000      	b.n	8002936 <ETH_SetMACConfig+0x3a>
 8002934:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002936:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800293c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7fdb      	ldrb	r3, [r3, #31]
 8002942:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002944:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800294a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	7f92      	ldrb	r2, [r2, #30]
 8002950:	2a00      	cmp	r2, #0
 8002952:	d102      	bne.n	800295a <ETH_SetMACConfig+0x5e>
 8002954:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002958:	e000      	b.n	800295c <ETH_SetMACConfig+0x60>
 800295a:	2200      	movs	r2, #0
                        macconf->Speed |
 800295c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	7f1b      	ldrb	r3, [r3, #28]
 8002962:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002964:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800296a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	791b      	ldrb	r3, [r3, #4]
 8002970:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002972:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	f892 2020 	ldrb.w	r2, [r2, #32]
 800297a:	2a00      	cmp	r2, #0
 800297c:	d102      	bne.n	8002984 <ETH_SetMACConfig+0x88>
 800297e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002982:	e000      	b.n	8002986 <ETH_SetMACConfig+0x8a>
 8002984:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002986:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7bdb      	ldrb	r3, [r3, #15]
 800298c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800298e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002994:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800299c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800299e:	4313      	orrs	r3, r2
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f7ff fa10 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d101      	bne.n	80029ea <ETH_SetMACConfig+0xee>
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	e000      	b.n	80029ec <ETH_SetMACConfig+0xf0>
 80029ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029fa:	2a01      	cmp	r2, #1
 80029fc:	d101      	bne.n	8002a02 <ETH_SetMACConfig+0x106>
 80029fe:	2208      	movs	r2, #8
 8002a00:	e000      	b.n	8002a04 <ETH_SetMACConfig+0x108>
 8002a02:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a04:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a0c:	2a01      	cmp	r2, #1
 8002a0e:	d101      	bne.n	8002a14 <ETH_SetMACConfig+0x118>
 8002a10:	2204      	movs	r2, #4
 8002a12:	e000      	b.n	8002a16 <ETH_SetMACConfig+0x11a>
 8002a14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a1e:	2a01      	cmp	r2, #1
 8002a20:	d101      	bne.n	8002a26 <ETH_SetMACConfig+0x12a>
 8002a22:	2202      	movs	r2, #2
 8002a24:	e000      	b.n	8002a28 <ETH_SetMACConfig+0x12c>
 8002a26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7ff f9cb 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	619a      	str	r2, [r3, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	ff20810f 	.word	0xff20810f

08002a5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <ETH_SetDMAConfig+0x110>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	7b1b      	ldrb	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <ETH_SetDMAConfig+0x2c>
 8002a82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a86:	e000      	b.n	8002a8a <ETH_SetDMAConfig+0x2e>
 8002a88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7b5b      	ldrb	r3, [r3, #13]
 8002a8e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a90:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	7f52      	ldrb	r2, [r2, #29]
 8002a96:	2a00      	cmp	r2, #0
 8002a98:	d102      	bne.n	8002aa0 <ETH_SetDMAConfig+0x44>
 8002a9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a9e:	e000      	b.n	8002aa2 <ETH_SetDMAConfig+0x46>
 8002aa0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002aa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	7b9b      	ldrb	r3, [r3, #14]
 8002aa8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002aaa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ab0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	7f1b      	ldrb	r3, [r3, #28]
 8002ab6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ab8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	7f9b      	ldrb	r3, [r3, #30]
 8002abe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ac0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ac6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ace:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7ff f972 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b00:	461a      	mov	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	791b      	ldrb	r3, [r3, #4]
 8002b0a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b10:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b16:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b1c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b24:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b26:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b2e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b34:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b42:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7ff f943 	bl	8001ddc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	f8de3f23 	.word	0xf8de3f23

08002b70 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0a6      	sub	sp, #152	; 0x98
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b84:	2300      	movs	r3, #0
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bac:	2300      	movs	r3, #0
 8002bae:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff fe86 	bl	80028fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c12:	2300      	movs	r3, #0
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c24:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff08 	bl	8002a5c <ETH_SetDMAConfig>
}
 8002c4c:	bf00      	nop
 8002c4e:	3798      	adds	r7, #152	; 0x98
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3305      	adds	r3, #5
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3204      	adds	r2, #4
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <ETH_MACAddressConfig+0x68>)
 8002c76:	4413      	add	r3, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3303      	adds	r3, #3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	061a      	lsls	r2, r3, #24
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <ETH_MACAddressConfig+0x6c>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6013      	str	r3, [r2, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40028040 	.word	0x40028040
 8002cc0:	40028044 	.word	0x40028044

08002cc4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e03e      	b.n	8002d50 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	3206      	adds	r2, #6
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d80c      	bhi.n	8002d34 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e004      	b.n	8002d3e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d9bd      	bls.n	8002cd2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d68:	611a      	str	r2, [r3, #16]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e046      	b.n	8002e12 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6919      	ldr	r1, [r3, #16]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002dc0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002dc8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	3212      	adds	r2, #18
 8002dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d80c      	bhi.n	8002e02 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6919      	ldr	r1, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60da      	str	r2, [r3, #12]
 8002e00:	e004      	b.n	8002e0c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d9b5      	bls.n	8002d84 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e42:	60da      	str	r2, [r3, #12]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b089      	sub	sp, #36	; 0x24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	e177      	b.n	800315c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8166 	bne.w	8003156 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d005      	beq.n	8002ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d130      	bne.n	8002f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0201 	and.w	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d017      	beq.n	8002f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d123      	bne.n	8002f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	220f      	movs	r2, #15
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0203 	and.w	r2, r3, #3
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80c0 	beq.w	8003156 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_GPIO_Init+0x324>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a65      	ldr	r2, [pc, #404]	; (8003174 <HAL_GPIO_Init+0x324>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b63      	ldr	r3, [pc, #396]	; (8003174 <HAL_GPIO_Init+0x324>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff2:	4a61      	ldr	r2, [pc, #388]	; (8003178 <HAL_GPIO_Init+0x328>)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	220f      	movs	r2, #15
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a58      	ldr	r2, [pc, #352]	; (800317c <HAL_GPIO_Init+0x32c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d037      	beq.n	800308e <HAL_GPIO_Init+0x23e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_GPIO_Init+0x330>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d031      	beq.n	800308a <HAL_GPIO_Init+0x23a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_GPIO_Init+0x334>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d02b      	beq.n	8003086 <HAL_GPIO_Init+0x236>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a55      	ldr	r2, [pc, #340]	; (8003188 <HAL_GPIO_Init+0x338>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d025      	beq.n	8003082 <HAL_GPIO_Init+0x232>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a54      	ldr	r2, [pc, #336]	; (800318c <HAL_GPIO_Init+0x33c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d01f      	beq.n	800307e <HAL_GPIO_Init+0x22e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a53      	ldr	r2, [pc, #332]	; (8003190 <HAL_GPIO_Init+0x340>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d019      	beq.n	800307a <HAL_GPIO_Init+0x22a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_GPIO_Init+0x344>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_GPIO_Init+0x226>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a51      	ldr	r2, [pc, #324]	; (8003198 <HAL_GPIO_Init+0x348>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00d      	beq.n	8003072 <HAL_GPIO_Init+0x222>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a50      	ldr	r2, [pc, #320]	; (800319c <HAL_GPIO_Init+0x34c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <HAL_GPIO_Init+0x21e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4f      	ldr	r2, [pc, #316]	; (80031a0 <HAL_GPIO_Init+0x350>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d101      	bne.n	800306a <HAL_GPIO_Init+0x21a>
 8003066:	2309      	movs	r3, #9
 8003068:	e012      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800306a:	230a      	movs	r3, #10
 800306c:	e010      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800306e:	2308      	movs	r3, #8
 8003070:	e00e      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003072:	2307      	movs	r3, #7
 8003074:	e00c      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003076:	2306      	movs	r3, #6
 8003078:	e00a      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800307a:	2305      	movs	r3, #5
 800307c:	e008      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800307e:	2304      	movs	r3, #4
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003082:	2303      	movs	r3, #3
 8003084:	e004      	b.n	8003090 <HAL_GPIO_Init+0x240>
 8003086:	2302      	movs	r3, #2
 8003088:	e002      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_GPIO_Init+0x240>
 800308e:	2300      	movs	r3, #0
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	f002 0203 	and.w	r2, r2, #3
 8003096:	0092      	lsls	r2, r2, #2
 8003098:	4093      	lsls	r3, r2
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <HAL_GPIO_Init+0x328>)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_GPIO_Init+0x354>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4013      	ands	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030d2:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <HAL_GPIO_Init+0x354>)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030d8:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <HAL_GPIO_Init+0x354>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030fc:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_GPIO_Init+0x354>)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_GPIO_Init+0x354>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_GPIO_Init+0x354>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_GPIO_Init+0x354>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <HAL_GPIO_Init+0x354>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3301      	adds	r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b0f      	cmp	r3, #15
 8003160:	f67f ae84 	bls.w	8002e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3724      	adds	r7, #36	; 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	40013800 	.word	0x40013800
 800317c:	40020000 	.word	0x40020000
 8003180:	40020400 	.word	0x40020400
 8003184:	40020800 	.word	0x40020800
 8003188:	40020c00 	.word	0x40020c00
 800318c:	40021000 	.word	0x40021000
 8003190:	40021400 	.word	0x40021400
 8003194:	40021800 	.word	0x40021800
 8003198:	40021c00 	.word	0x40021c00
 800319c:	40022000 	.word	0x40022000
 80031a0:	40022400 	.word	0x40022400
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	e001      	b.n	80031ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f4:	e003      	b.n	80031fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	041a      	lsls	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800321c:	887a      	ldrh	r2, [r7, #2]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	041a      	lsls	r2, r3, #16
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43d9      	mvns	r1, r3
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	400b      	ands	r3, r1
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800323e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003240:	b08f      	sub	sp, #60	; 0x3c
 8003242:	af0a      	add	r7, sp, #40	; 0x28
 8003244:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e10f      	b.n	8003470 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd fffe 	bl	800126c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f001 f9ad 	bl	80045ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	687e      	ldr	r6, [r7, #4]
 800329c:	466d      	mov	r5, sp
 800329e:	f106 0410 	add.w	r4, r6, #16
 80032a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80032b2:	1d33      	adds	r3, r6, #4
 80032b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b6:	6838      	ldr	r0, [r7, #0]
 80032b8:	f001 f938 	bl	800452c <USB_CoreInit>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2202      	movs	r2, #2
 80032c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0d0      	b.n	8003470 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 f99b 	bl	8004610 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e04a      	b.n	8003376 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	333d      	adds	r3, #61	; 0x3d
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	333c      	adds	r3, #60	; 0x3c
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	b298      	uxth	r0, r3
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3344      	adds	r3, #68	; 0x44
 800331c:	4602      	mov	r2, r0
 800331e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3340      	adds	r3, #64	; 0x40
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3348      	adds	r3, #72	; 0x48
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334c      	adds	r3, #76	; 0x4c
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3354      	adds	r3, #84	; 0x54
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	3301      	adds	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3af      	bcc.n	80032e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e044      	b.n	8003410 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	3301      	adds	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	429a      	cmp	r2, r3
 8003418:	d3b5      	bcc.n	8003386 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	687e      	ldr	r6, [r7, #4]
 8003422:	466d      	mov	r5, sp
 8003424:	f106 0410 	add.w	r4, r6, #16
 8003428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800342c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800342e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003434:	e885 0003 	stmia.w	r5, {r0, r1}
 8003438:	1d33      	adds	r3, r6, #4
 800343a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800343c:	6838      	ldr	r0, [r7, #0]
 800343e:	f001 f933 	bl	80046a8 <USB_DevInit>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e00d      	b.n	8003470 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f001 fafe 	bl	8004a6a <USB_DevDisconnect>

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e267      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003496:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d00c      	beq.n	80034bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4b85      	ldr	r3, [pc, #532]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ae:	4b82      	ldr	r3, [pc, #520]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	4b7e      	ldr	r3, [pc, #504]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05b      	beq.n	8003580 <HAL_RCC_OscConfig+0x108>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d157      	bne.n	8003580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e242      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034dc:	d106      	bne.n	80034ec <HAL_RCC_OscConfig+0x74>
 80034de:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a75      	ldr	r2, [pc, #468]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	e01d      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x98>
 80034f6:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6f      	ldr	r2, [pc, #444]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a6c      	ldr	r2, [pc, #432]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0xb0>
 8003510:	4b69      	ldr	r3, [pc, #420]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a68      	ldr	r2, [pc, #416]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b66      	ldr	r3, [pc, #408]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a65      	ldr	r2, [pc, #404]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d013      	beq.n	8003558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fc48 	bl	8001dc4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003538:	f7fe fc44 	bl	8001dc4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e207      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	4b5b      	ldr	r3, [pc, #364]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0xc0>
 8003556:	e014      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fc34 	bl	8001dc4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fc30 	bl	8001dc4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e1f3      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	4b51      	ldr	r3, [pc, #324]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0xe8>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800358e:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d11c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a6:	4b44      	ldr	r3, [pc, #272]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d116      	bne.n	80035e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d001      	beq.n	80035ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e1c7      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ca:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4937      	ldr	r1, [pc, #220]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	e03a      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCC_OscConfig+0x244>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fe fbe9 	bl	8001dc4 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f6:	f7fe fbe5 	bl	8001dc4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e1a8      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4925      	ldr	r1, [pc, #148]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
 8003628:	e015      	b.n	8003656 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_RCC_OscConfig+0x244>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe fbc8 	bl	8001dc4 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003638:	f7fe fbc4 	bl	8001dc4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e187      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d036      	beq.n	80036d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d016      	beq.n	8003698 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_RCC_OscConfig+0x248>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fe fba8 	bl	8001dc4 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003678:	f7fe fba4 	bl	8001dc4 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e167      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_OscConfig+0x240>)
 800368c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0x200>
 8003696:	e01b      	b.n	80036d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003698:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_OscConfig+0x248>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fe fb91 	bl	8001dc4 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036a4:	e00e      	b.n	80036c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fe fb8d 	bl	8001dc4 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d907      	bls.n	80036c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e150      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
 80036b8:	40023800 	.word	0x40023800
 80036bc:	42470000 	.word	0x42470000
 80036c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	4b88      	ldr	r3, [pc, #544]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ea      	bne.n	80036a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8097 	beq.w	800380c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4b81      	ldr	r3, [pc, #516]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b7d      	ldr	r3, [pc, #500]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a7c      	ldr	r2, [pc, #496]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
 80036fe:	4b7a      	ldr	r3, [pc, #488]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b77      	ldr	r3, [pc, #476]	; (80038ec <HAL_RCC_OscConfig+0x474>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371a:	4b74      	ldr	r3, [pc, #464]	; (80038ec <HAL_RCC_OscConfig+0x474>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a73      	ldr	r2, [pc, #460]	; (80038ec <HAL_RCC_OscConfig+0x474>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7fe fb4d 	bl	8001dc4 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7fe fb49 	bl	8001dc4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e10c      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <HAL_RCC_OscConfig+0x474>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x2ea>
 8003754:	4b64      	ldr	r3, [pc, #400]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a63      	ldr	r2, [pc, #396]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	e01c      	b.n	800379c <HAL_RCC_OscConfig+0x324>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b05      	cmp	r3, #5
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0x30c>
 800376a:	4b5f      	ldr	r3, [pc, #380]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a5e      	ldr	r2, [pc, #376]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
 8003776:	4b5c      	ldr	r3, [pc, #368]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a5b      	ldr	r2, [pc, #364]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0x324>
 8003784:	4b58      	ldr	r3, [pc, #352]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a57      	ldr	r2, [pc, #348]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
 8003790:	4b55      	ldr	r3, [pc, #340]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	4a54      	ldr	r2, [pc, #336]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003796:	f023 0304 	bic.w	r3, r3, #4
 800379a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fe fb0e 	bl	8001dc4 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fe fb0a 	bl	8001dc4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0cb      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c2:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ee      	beq.n	80037ac <HAL_RCC_OscConfig+0x334>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fe faf8 	bl	8001dc4 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	f7fe faf4 	bl	8001dc4 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e0b5      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ee      	bne.n	80037d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80a1 	beq.w	8003958 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d05c      	beq.n	80038dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d141      	bne.n	80038ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe fac8 	bl	8001dc4 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fac4 	bl	8001dc4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e087      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	085b      	lsrs	r3, r3, #1
 800386e:	3b01      	subs	r3, #1
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	491b      	ldr	r1, [pc, #108]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 800387c:	4313      	orrs	r3, r2
 800387e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x478>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003886:	f7fe fa9d 	bl	8001dc4 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388e:	f7fe fa99 	bl	8001dc4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e05c      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x416>
 80038ac:	e054      	b.n	8003958 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCC_OscConfig+0x478>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fa86 	bl	8001dc4 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fa82 	bl	8001dc4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e045      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCC_OscConfig+0x470>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x444>
 80038da:	e03d      	b.n	8003958 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e038      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40007000 	.word	0x40007000
 80038f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f4:	4b1b      	ldr	r3, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x4ec>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d028      	beq.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d121      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d11a      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800392a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800392c:	4293      	cmp	r3, r2
 800392e:	d111      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	3b01      	subs	r3, #1
 800393e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d107      	bne.n	8003954 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800

08003968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0cc      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b68      	ldr	r3, [pc, #416]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d90c      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b63      	ldr	r3, [pc, #396]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0b8      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039bc:	4b59      	ldr	r3, [pc, #356]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d4:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	4a52      	ldr	r2, [pc, #328]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e0:	4b50      	ldr	r3, [pc, #320]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	494d      	ldr	r1, [pc, #308]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d044      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d107      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d119      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e07f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b3f      	ldr	r3, [pc, #252]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e067      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4934      	ldr	r1, [pc, #208]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fe f9b4 	bl	8001dc4 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fe f9b0 	bl	8001dc4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e04f      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d20c      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e032      	b.n	8003b16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abc:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4916      	ldr	r1, [pc, #88]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	490e      	ldr	r1, [pc, #56]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aee:	f000 f821 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003af2:	4602      	mov	r2, r0
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	490a      	ldr	r1, [pc, #40]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	5ccb      	ldrb	r3, [r1, r3]
 8003b02:	fa22 f303 	lsr.w	r3, r2, r3
 8003b06:	4a09      	ldr	r2, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe f914 	bl	8001d3c <HAL_InitTick>

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00
 8003b24:	40023800 	.word	0x40023800
 8003b28:	08005498 	.word	0x08005498
 8003b2c:	20000010 	.word	0x20000010
 8003b30:	20000014 	.word	0x20000014

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b094      	sub	sp, #80	; 0x50
 8003b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b40:	2300      	movs	r3, #0
 8003b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b44:	2300      	movs	r3, #0
 8003b46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4c:	4b79      	ldr	r3, [pc, #484]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d00d      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x40>
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	f200 80e1 	bhi.w	8003d20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d003      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b66:	e0db      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b68:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b6c:	e0db      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b6e:	4b73      	ldr	r3, [pc, #460]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b72:	e0d8      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b74:	4b6f      	ldr	r3, [pc, #444]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7e:	4b6d      	ldr	r3, [pc, #436]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8a:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	099b      	lsrs	r3, r3, #6
 8003b90:	2200      	movs	r2, #0
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	f04f 0000 	mov.w	r0, #0
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	0159      	lsls	r1, r3, #5
 8003bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb8:	0150      	lsls	r0, r2, #5
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	1a51      	subs	r1, r2, r1
 8003bc2:	6139      	str	r1, [r7, #16]
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bd8:	4659      	mov	r1, fp
 8003bda:	018b      	lsls	r3, r1, #6
 8003bdc:	4651      	mov	r1, sl
 8003bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003be2:	4651      	mov	r1, sl
 8003be4:	018a      	lsls	r2, r1, #6
 8003be6:	4651      	mov	r1, sl
 8003be8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bec:	4659      	mov	r1, fp
 8003bee:	eb63 0901 	sbc.w	r9, r3, r1
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	eb18 0303 	adds.w	r3, r8, r3
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	462b      	mov	r3, r5
 8003c14:	eb49 0303 	adc.w	r3, r9, r3
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c26:	4629      	mov	r1, r5
 8003c28:	024b      	lsls	r3, r1, #9
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c30:	4621      	mov	r1, r4
 8003c32:	024a      	lsls	r2, r1, #9
 8003c34:	4610      	mov	r0, r2
 8003c36:	4619      	mov	r1, r3
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c44:	f7fc fe32 	bl	80008ac <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c50:	e058      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c52:	4b38      	ldr	r3, [pc, #224]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	2200      	movs	r2, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	f04f 0000 	mov.w	r0, #0
 8003c74:	f04f 0100 	mov.w	r1, #0
 8003c78:	0159      	lsls	r1, r3, #5
 8003c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7e:	0150      	lsls	r0, r2, #5
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4641      	mov	r1, r8
 8003c86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ca0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ca4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ca8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	00eb      	lsls	r3, r5, #3
 8003cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cba:	00e2      	lsls	r2, r4, #3
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	eb45 0303 	adc.w	r3, r5, r3
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	028b      	lsls	r3, r1, #10
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	028a      	lsls	r2, r1, #10
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	61fa      	str	r2, [r7, #28]
 8003cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf8:	f7fc fdd8 	bl	80008ac <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3750      	adds	r7, #80	; 0x50
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	007a1200 	.word	0x007a1200

08003d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000010 	.word	0x20000010

08003d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d5c:	f7ff fff0 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	0a9b      	lsrs	r3, r3, #10
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	4903      	ldr	r1, [pc, #12]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	080054a8 	.word	0x080054a8

08003d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d84:	f7ff ffdc 	bl	8003d40 <HAL_RCC_GetHCLKFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0b5b      	lsrs	r3, r3, #13
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	4903      	ldr	r1, [pc, #12]	; (8003da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	080054a8 	.word	0x080054a8

08003da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e03f      	b.n	8003e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fa04 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	; 0x24
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f929 	bl	8004044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b08a      	sub	sp, #40	; 0x28
 8003e46:	af02      	add	r7, sp, #8
 8003e48:	60f8      	str	r0, [r7, #12]
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d17c      	bne.n	8003f5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_UART_Transmit+0x2c>
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e075      	b.n	8003f5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_UART_Transmit+0x3e>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e06e      	b.n	8003f5e <HAL_UART_Transmit+0x11c>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2221      	movs	r2, #33	; 0x21
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e96:	f7fd ff95 	bl	8001dc4 <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	88fa      	ldrh	r2, [r7, #6]
 8003ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	88fa      	ldrh	r2, [r7, #6]
 8003ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb0:	d108      	bne.n	8003ec4 <HAL_UART_Transmit+0x82>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	e003      	b.n	8003ecc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ed4:	e02a      	b.n	8003f2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f840 	bl	8003f66 <UART_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e036      	b.n	8003f5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	3302      	adds	r3, #2
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	e007      	b.n	8003f1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1cf      	bne.n	8003ed6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2140      	movs	r1, #64	; 0x40
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f810 	bl	8003f66 <UART_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e006      	b.n	8003f5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b090      	sub	sp, #64	; 0x40
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f76:	e050      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d04c      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f86:	f7fd ff1d 	bl	8001dc4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d241      	bcs.n	800401a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fb6:	637a      	str	r2, [r7, #52]	; 0x34
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e5      	bne.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fea:	623a      	str	r2, [r7, #32]
 8003fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	69f9      	ldr	r1, [r7, #28]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e00f      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	429a      	cmp	r2, r3
 8004036:	d09f      	beq.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3740      	adds	r7, #64	; 0x40
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004048:	b0c0      	sub	sp, #256	; 0x100
 800404a:	af00      	add	r7, sp, #0
 800404c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	68d9      	ldr	r1, [r3, #12]
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	ea40 0301 	orr.w	r3, r0, r1
 800406c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800409c:	f021 010c 	bic.w	r1, r1, #12
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040aa:	430b      	orrs	r3, r1
 80040ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	ea40 0301 	orr.w	r3, r0, r1
 80040ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <UART_SetConfig+0x2cc>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d005      	beq.n	80040e4 <UART_SetConfig+0xa0>
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8d      	ldr	r3, [pc, #564]	; (8004314 <UART_SetConfig+0x2d0>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d104      	bne.n	80040ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7ff fe4c 	bl	8003d80 <HAL_RCC_GetPCLK2Freq>
 80040e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040ec:	e003      	b.n	80040f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ee:	f7ff fe33 	bl	8003d58 <HAL_RCC_GetPCLK1Freq>
 80040f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	f040 810c 	bne.w	800431c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004108:	2200      	movs	r2, #0
 800410a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800410e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004112:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	1891      	adds	r1, r2, r2
 800411c:	65b9      	str	r1, [r7, #88]	; 0x58
 800411e:	415b      	adcs	r3, r3
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004122:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004126:	4621      	mov	r1, r4
 8004128:	eb12 0801 	adds.w	r8, r2, r1
 800412c:	4629      	mov	r1, r5
 800412e:	eb43 0901 	adc.w	r9, r3, r1
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004142:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004146:	4690      	mov	r8, r2
 8004148:	4699      	mov	r9, r3
 800414a:	4623      	mov	r3, r4
 800414c:	eb18 0303 	adds.w	r3, r8, r3
 8004150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004154:	462b      	mov	r3, r5
 8004156:	eb49 0303 	adc.w	r3, r9, r3
 800415a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800416a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800416e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004172:	460b      	mov	r3, r1
 8004174:	18db      	adds	r3, r3, r3
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
 8004178:	4613      	mov	r3, r2
 800417a:	eb42 0303 	adc.w	r3, r2, r3
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
 8004180:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004184:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004188:	f7fc fb90 	bl	80008ac <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b61      	ldr	r3, [pc, #388]	; (8004318 <UART_SetConfig+0x2d4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80041b4:	415b      	adcs	r3, r3
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041bc:	4641      	mov	r1, r8
 80041be:	eb12 0a01 	adds.w	sl, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0b01 	adc.w	fp, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041dc:	4692      	mov	sl, r2
 80041de:	469b      	mov	fp, r3
 80041e0:	4643      	mov	r3, r8
 80041e2:	eb1a 0303 	adds.w	r3, sl, r3
 80041e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ea:	464b      	mov	r3, r9
 80041ec:	eb4b 0303 	adc.w	r3, fp, r3
 80041f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004200:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004204:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	643b      	str	r3, [r7, #64]	; 0x40
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
 8004216:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800421a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800421e:	f7fc fb45 	bl	80008ac <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4611      	mov	r1, r2
 8004228:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <UART_SetConfig+0x2d4>)
 800422a:	fba3 2301 	umull	r2, r3, r3, r1
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2264      	movs	r2, #100	; 0x64
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	1acb      	subs	r3, r1, r3
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800423e:	4b36      	ldr	r3, [pc, #216]	; (8004318 <UART_SetConfig+0x2d4>)
 8004240:	fba3 2302 	umull	r2, r3, r3, r2
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800424c:	441c      	add	r4, r3
 800424e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004252:	2200      	movs	r2, #0
 8004254:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004258:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800425c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	63b9      	str	r1, [r7, #56]	; 0x38
 8004268:	415b      	adcs	r3, r3
 800426a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800426c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6339      	str	r1, [r7, #48]	; 0x30
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a4:	464b      	mov	r3, r9
 80042a6:	460a      	mov	r2, r1
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042c4:	460b      	mov	r3, r1
 80042c6:	18db      	adds	r3, r3, r3
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ca:	4613      	mov	r3, r2
 80042cc:	eb42 0303 	adc.w	r3, r2, r3
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042da:	f7fc fae7 	bl	80008ac <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <UART_SetConfig+0x2d4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <UART_SetConfig+0x2d4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4422      	add	r2, r4
 800430a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800430c:	e105      	b.n	800451a <UART_SetConfig+0x4d6>
 800430e:	bf00      	nop
 8004310:	40011000 	.word	0x40011000
 8004314:	40011400 	.word	0x40011400
 8004318:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800431c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004326:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800432a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800432e:	4642      	mov	r2, r8
 8004330:	464b      	mov	r3, r9
 8004332:	1891      	adds	r1, r2, r2
 8004334:	6239      	str	r1, [r7, #32]
 8004336:	415b      	adcs	r3, r3
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433e:	4641      	mov	r1, r8
 8004340:	1854      	adds	r4, r2, r1
 8004342:	4649      	mov	r1, r9
 8004344:	eb43 0501 	adc.w	r5, r3, r1
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	00eb      	lsls	r3, r5, #3
 8004352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004356:	00e2      	lsls	r2, r4, #3
 8004358:	4614      	mov	r4, r2
 800435a:	461d      	mov	r5, r3
 800435c:	4643      	mov	r3, r8
 800435e:	18e3      	adds	r3, r4, r3
 8004360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004364:	464b      	mov	r3, r9
 8004366:	eb45 0303 	adc.w	r3, r5, r3
 800436a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800437a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800438a:	4629      	mov	r1, r5
 800438c:	008b      	lsls	r3, r1, #2
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004394:	4621      	mov	r1, r4
 8004396:	008a      	lsls	r2, r1, #2
 8004398:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800439c:	f7fc fa86 	bl	80008ac <__aeabi_uldivmod>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4b60      	ldr	r3, [pc, #384]	; (8004528 <UART_SetConfig+0x4e4>)
 80043a6:	fba3 2302 	umull	r2, r3, r3, r2
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	011c      	lsls	r4, r3, #4
 80043ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b2:	2200      	movs	r2, #0
 80043b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043c0:	4642      	mov	r2, r8
 80043c2:	464b      	mov	r3, r9
 80043c4:	1891      	adds	r1, r2, r2
 80043c6:	61b9      	str	r1, [r7, #24]
 80043c8:	415b      	adcs	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d0:	4641      	mov	r1, r8
 80043d2:	1851      	adds	r1, r2, r1
 80043d4:	6139      	str	r1, [r7, #16]
 80043d6:	4649      	mov	r1, r9
 80043d8:	414b      	adcs	r3, r1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e8:	4659      	mov	r1, fp
 80043ea:	00cb      	lsls	r3, r1, #3
 80043ec:	4651      	mov	r1, sl
 80043ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f2:	4651      	mov	r1, sl
 80043f4:	00ca      	lsls	r2, r1, #3
 80043f6:	4610      	mov	r0, r2
 80043f8:	4619      	mov	r1, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	4642      	mov	r2, r8
 80043fe:	189b      	adds	r3, r3, r2
 8004400:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004404:	464b      	mov	r3, r9
 8004406:	460a      	mov	r2, r1
 8004408:	eb42 0303 	adc.w	r3, r2, r3
 800440c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	67bb      	str	r3, [r7, #120]	; 0x78
 800441a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004428:	4649      	mov	r1, r9
 800442a:	008b      	lsls	r3, r1, #2
 800442c:	4641      	mov	r1, r8
 800442e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004432:	4641      	mov	r1, r8
 8004434:	008a      	lsls	r2, r1, #2
 8004436:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800443a:	f7fc fa37 	bl	80008ac <__aeabi_uldivmod>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4b39      	ldr	r3, [pc, #228]	; (8004528 <UART_SetConfig+0x4e4>)
 8004444:	fba3 1302 	umull	r1, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	2164      	movs	r1, #100	; 0x64
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	3332      	adds	r3, #50	; 0x32
 8004456:	4a34      	ldr	r2, [pc, #208]	; (8004528 <UART_SetConfig+0x4e4>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004462:	441c      	add	r4, r3
 8004464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004468:	2200      	movs	r2, #0
 800446a:	673b      	str	r3, [r7, #112]	; 0x70
 800446c:	677a      	str	r2, [r7, #116]	; 0x74
 800446e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004472:	4642      	mov	r2, r8
 8004474:	464b      	mov	r3, r9
 8004476:	1891      	adds	r1, r2, r2
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	415b      	adcs	r3, r3
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004482:	4641      	mov	r1, r8
 8004484:	1851      	adds	r1, r2, r1
 8004486:	6039      	str	r1, [r7, #0]
 8004488:	4649      	mov	r1, r9
 800448a:	414b      	adcs	r3, r1
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800449a:	4659      	mov	r1, fp
 800449c:	00cb      	lsls	r3, r1, #3
 800449e:	4651      	mov	r1, sl
 80044a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a4:	4651      	mov	r1, sl
 80044a6:	00ca      	lsls	r2, r1, #3
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	4603      	mov	r3, r0
 80044ae:	4642      	mov	r2, r8
 80044b0:	189b      	adds	r3, r3, r2
 80044b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b4:	464b      	mov	r3, r9
 80044b6:	460a      	mov	r2, r1
 80044b8:	eb42 0303 	adc.w	r3, r2, r3
 80044bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	663b      	str	r3, [r7, #96]	; 0x60
 80044c8:	667a      	str	r2, [r7, #100]	; 0x64
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044d6:	4649      	mov	r1, r9
 80044d8:	008b      	lsls	r3, r1, #2
 80044da:	4641      	mov	r1, r8
 80044dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e0:	4641      	mov	r1, r8
 80044e2:	008a      	lsls	r2, r1, #2
 80044e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044e8:	f7fc f9e0 	bl	80008ac <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <UART_SetConfig+0x4e4>)
 80044f2:	fba3 1302 	umull	r1, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2164      	movs	r1, #100	; 0x64
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	3332      	adds	r3, #50	; 0x32
 8004504:	4a08      	ldr	r2, [pc, #32]	; (8004528 <UART_SetConfig+0x4e4>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	f003 020f 	and.w	r2, r3, #15
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4422      	add	r2, r4
 8004518:	609a      	str	r2, [r3, #8]
}
 800451a:	bf00      	nop
 800451c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004520:	46bd      	mov	sp, r7
 8004522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004526:	bf00      	nop
 8004528:	51eb851f 	.word	0x51eb851f

0800452c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800452c:	b084      	sub	sp, #16
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	f107 001c 	add.w	r0, r7, #28
 800453a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	2b01      	cmp	r3, #1
 8004542:	d122      	bne.n	800458a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800456c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 faa2 	bl	8004ac8 <USB_CoreReset>
 8004584:	4603      	mov	r3, r0
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e01a      	b.n	80045c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa96 	bl	8004ac8 <USB_CoreReset>
 800459c:	4603      	mov	r3, r0
 800459e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
 80045b2:	e005      	b.n	80045c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d10b      	bne.n	80045de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f043 0206 	orr.w	r2, r3, #6
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045ea:	b004      	add	sp, #16
 80045ec:	4770      	bx	lr

080045ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d115      	bne.n	800465e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800463e:	2001      	movs	r0, #1
 8004640:	f7fd fbcc 	bl	8001ddc <HAL_Delay>
      ms++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa2e 	bl	8004aac <USB_GetMode>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d01e      	beq.n	8004694 <USB_SetCurrentMode+0x84>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b31      	cmp	r3, #49	; 0x31
 800465a:	d9f0      	bls.n	800463e <USB_SetCurrentMode+0x2e>
 800465c:	e01a      	b.n	8004694 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800465e:	78fb      	ldrb	r3, [r7, #3]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d115      	bne.n	8004690 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004670:	2001      	movs	r0, #1
 8004672:	f7fd fbb3 	bl	8001ddc <HAL_Delay>
      ms++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3301      	adds	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa15 	bl	8004aac <USB_GetMode>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <USB_SetCurrentMode+0x84>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b31      	cmp	r3, #49	; 0x31
 800468c:	d9f0      	bls.n	8004670 <USB_SetCurrentMode+0x60>
 800468e:	e001      	b.n	8004694 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e005      	b.n	80046a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b32      	cmp	r3, #50	; 0x32
 8004698:	d101      	bne.n	800469e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046a8:	b084      	sub	sp, #16
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e009      	b.n	80046dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3340      	adds	r3, #64	; 0x40
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	2200      	movs	r2, #0
 80046d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	3301      	adds	r3, #1
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b0e      	cmp	r3, #14
 80046e0:	d9f2      	bls.n	80046c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d11c      	bne.n	8004722 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	639a      	str	r2, [r3, #56]	; 0x38
 8004720:	e00b      	b.n	800473a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474c:	4619      	mov	r1, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004754:	461a      	mov	r2, r3
 8004756:	680b      	ldr	r3, [r1, #0]
 8004758:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10c      	bne.n	800477a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d104      	bne.n	8004770 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004766:	2100      	movs	r1, #0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f965 	bl	8004a38 <USB_SetDevSpeed>
 800476e:	e008      	b.n	8004782 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004770:	2101      	movs	r1, #1
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f960 	bl	8004a38 <USB_SetDevSpeed>
 8004778:	e003      	b.n	8004782 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800477a:	2103      	movs	r1, #3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f95b 	bl	8004a38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004782:	2110      	movs	r1, #16
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8f3 	bl	8004970 <USB_FlushTxFifo>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f91f 	bl	80049d8 <USB_FlushRxFifo>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	461a      	mov	r2, r3
 80047b8:	2300      	movs	r3, #0
 80047ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e043      	b.n	8004856 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e4:	d118      	bne.n	8004818 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	461a      	mov	r2, r3
 80047fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	e013      	b.n	800482a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	461a      	mov	r2, r3
 8004810:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e008      	b.n	800482a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	461a      	mov	r2, r3
 8004826:	2300      	movs	r3, #0
 8004828:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800484e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3301      	adds	r3, #1
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	429a      	cmp	r2, r3
 800485c:	d3b7      	bcc.n	80047ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e043      	b.n	80048ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800487a:	d118      	bne.n	80048ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	461a      	mov	r2, r3
 8004890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e013      	b.n	80048c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e008      	b.n	80048c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	461a      	mov	r2, r3
 80048bc:	2300      	movs	r3, #0
 80048be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	2300      	movs	r3, #0
 80048d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3301      	adds	r3, #1
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3b7      	bcc.n	8004864 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004906:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004914:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f043 0210 	orr.w	r2, r3, #16
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699a      	ldr	r2, [r3, #24]
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <USB_DevInit+0x2c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f043 0208 	orr.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d107      	bne.n	800495c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004954:	f043 0304 	orr.w	r3, r3, #4
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800495c:	7dfb      	ldrb	r3, [r7, #23]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004968:	b004      	add	sp, #16
 800496a:	4770      	bx	lr
 800496c:	803c3800 	.word	0x803c3800

08004970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <USB_FlushTxFifo+0x64>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e01b      	b.n	80049c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b00      	cmp	r3, #0
 8004996:	daf2      	bge.n	800497e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	019b      	lsls	r3, r3, #6
 80049a0:	f043 0220 	orr.w	r2, r3, #32
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <USB_FlushTxFifo+0x64>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e006      	b.n	80049c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d0f0      	beq.n	80049a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00030d40 	.word	0x00030d40

080049d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <USB_FlushRxFifo+0x5c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e018      	b.n	8004a28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	daf2      	bge.n	80049e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2210      	movs	r2, #16
 8004a06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a08      	ldr	r2, [pc, #32]	; (8004a34 <USB_FlushRxFifo+0x5c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e006      	b.n	8004a28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b10      	cmp	r3, #16
 8004a24:	d0f0      	beq.n	8004a08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	00030d40 	.word	0x00030d40

08004a38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a84:	f023 0303 	bic.w	r3, r3, #3
 8004a88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a98:	f043 0302 	orr.w	r3, r3, #2
 8004a9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <USB_CoreReset+0x64>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e01b      	b.n	8004b1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	daf2      	bge.n	8004ad4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <USB_CoreReset+0x64>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e006      	b.n	8004b1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d0f0      	beq.n	8004afe <USB_CoreReset+0x36>

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	00030d40 	.word	0x00030d40

08004b30 <__errno>:
 8004b30:	4b01      	ldr	r3, [pc, #4]	; (8004b38 <__errno+0x8>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	2000001c 	.word	0x2000001c

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4d0d      	ldr	r5, [pc, #52]	; (8004b74 <__libc_init_array+0x38>)
 8004b40:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	2600      	movs	r6, #0
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	4d0b      	ldr	r5, [pc, #44]	; (8004b7c <__libc_init_array+0x40>)
 8004b4e:	4c0c      	ldr	r4, [pc, #48]	; (8004b80 <__libc_init_array+0x44>)
 8004b50:	f000 fc8e 	bl	8005470 <_init>
 8004b54:	1b64      	subs	r4, r4, r5
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	2600      	movs	r6, #0
 8004b5a:	42a6      	cmp	r6, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b64:	4798      	blx	r3
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6e:	4798      	blx	r3
 8004b70:	3601      	adds	r6, #1
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	080054ec 	.word	0x080054ec
 8004b78:	080054ec 	.word	0x080054ec
 8004b7c:	080054ec 	.word	0x080054ec
 8004b80:	080054f0 	.word	0x080054f0

08004b84 <memset>:
 8004b84:	4402      	add	r2, r0
 8004b86:	4603      	mov	r3, r0
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <siprintf>:
 8004b94:	b40e      	push	{r1, r2, r3}
 8004b96:	b500      	push	{lr}
 8004b98:	b09c      	sub	sp, #112	; 0x70
 8004b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	9006      	str	r0, [sp, #24]
 8004ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ba4:	4809      	ldr	r0, [pc, #36]	; (8004bcc <siprintf+0x38>)
 8004ba6:	9107      	str	r1, [sp, #28]
 8004ba8:	9104      	str	r1, [sp, #16]
 8004baa:	4909      	ldr	r1, [pc, #36]	; (8004bd0 <siprintf+0x3c>)
 8004bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb0:	9105      	str	r1, [sp, #20]
 8004bb2:	6800      	ldr	r0, [r0, #0]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	a902      	add	r1, sp, #8
 8004bb8:	f000 f868 	bl	8004c8c <_svfiprintf_r>
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	b01c      	add	sp, #112	; 0x70
 8004bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc8:	b003      	add	sp, #12
 8004bca:	4770      	bx	lr
 8004bcc:	2000001c 	.word	0x2000001c
 8004bd0:	ffff0208 	.word	0xffff0208

08004bd4 <__ssputs_r>:
 8004bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd8:	688e      	ldr	r6, [r1, #8]
 8004bda:	429e      	cmp	r6, r3
 8004bdc:	4682      	mov	sl, r0
 8004bde:	460c      	mov	r4, r1
 8004be0:	4690      	mov	r8, r2
 8004be2:	461f      	mov	r7, r3
 8004be4:	d838      	bhi.n	8004c58 <__ssputs_r+0x84>
 8004be6:	898a      	ldrh	r2, [r1, #12]
 8004be8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bec:	d032      	beq.n	8004c54 <__ssputs_r+0x80>
 8004bee:	6825      	ldr	r5, [r4, #0]
 8004bf0:	6909      	ldr	r1, [r1, #16]
 8004bf2:	eba5 0901 	sub.w	r9, r5, r1
 8004bf6:	6965      	ldr	r5, [r4, #20]
 8004bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c00:	3301      	adds	r3, #1
 8004c02:	444b      	add	r3, r9
 8004c04:	106d      	asrs	r5, r5, #1
 8004c06:	429d      	cmp	r5, r3
 8004c08:	bf38      	it	cc
 8004c0a:	461d      	movcc	r5, r3
 8004c0c:	0553      	lsls	r3, r2, #21
 8004c0e:	d531      	bpl.n	8004c74 <__ssputs_r+0xa0>
 8004c10:	4629      	mov	r1, r5
 8004c12:	f000 fb63 	bl	80052dc <_malloc_r>
 8004c16:	4606      	mov	r6, r0
 8004c18:	b950      	cbnz	r0, 8004c30 <__ssputs_r+0x5c>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	f8ca 3000 	str.w	r3, [sl]
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c26:	81a3      	strh	r3, [r4, #12]
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c30:	6921      	ldr	r1, [r4, #16]
 8004c32:	464a      	mov	r2, r9
 8004c34:	f000 fabe 	bl	80051b4 <memcpy>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	6126      	str	r6, [r4, #16]
 8004c46:	6165      	str	r5, [r4, #20]
 8004c48:	444e      	add	r6, r9
 8004c4a:	eba5 0509 	sub.w	r5, r5, r9
 8004c4e:	6026      	str	r6, [r4, #0]
 8004c50:	60a5      	str	r5, [r4, #8]
 8004c52:	463e      	mov	r6, r7
 8004c54:	42be      	cmp	r6, r7
 8004c56:	d900      	bls.n	8004c5a <__ssputs_r+0x86>
 8004c58:	463e      	mov	r6, r7
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	4641      	mov	r1, r8
 8004c60:	f000 fab6 	bl	80051d0 <memmove>
 8004c64:	68a3      	ldr	r3, [r4, #8]
 8004c66:	1b9b      	subs	r3, r3, r6
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	4433      	add	r3, r6
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7db      	b.n	8004c2c <__ssputs_r+0x58>
 8004c74:	462a      	mov	r2, r5
 8004c76:	f000 fba5 	bl	80053c4 <_realloc_r>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d1e1      	bne.n	8004c44 <__ssputs_r+0x70>
 8004c80:	6921      	ldr	r1, [r4, #16]
 8004c82:	4650      	mov	r0, sl
 8004c84:	f000 fabe 	bl	8005204 <_free_r>
 8004c88:	e7c7      	b.n	8004c1a <__ssputs_r+0x46>
	...

08004c8c <_svfiprintf_r>:
 8004c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c90:	4698      	mov	r8, r3
 8004c92:	898b      	ldrh	r3, [r1, #12]
 8004c94:	061b      	lsls	r3, r3, #24
 8004c96:	b09d      	sub	sp, #116	; 0x74
 8004c98:	4607      	mov	r7, r0
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	4614      	mov	r4, r2
 8004c9e:	d50e      	bpl.n	8004cbe <_svfiprintf_r+0x32>
 8004ca0:	690b      	ldr	r3, [r1, #16]
 8004ca2:	b963      	cbnz	r3, 8004cbe <_svfiprintf_r+0x32>
 8004ca4:	2140      	movs	r1, #64	; 0x40
 8004ca6:	f000 fb19 	bl	80052dc <_malloc_r>
 8004caa:	6028      	str	r0, [r5, #0]
 8004cac:	6128      	str	r0, [r5, #16]
 8004cae:	b920      	cbnz	r0, 8004cba <_svfiprintf_r+0x2e>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb8:	e0d1      	b.n	8004e5e <_svfiprintf_r+0x1d2>
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	616b      	str	r3, [r5, #20]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc2:	2320      	movs	r3, #32
 8004cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ccc:	2330      	movs	r3, #48	; 0x30
 8004cce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e78 <_svfiprintf_r+0x1ec>
 8004cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cd6:	f04f 0901 	mov.w	r9, #1
 8004cda:	4623      	mov	r3, r4
 8004cdc:	469a      	mov	sl, r3
 8004cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ce2:	b10a      	cbz	r2, 8004ce8 <_svfiprintf_r+0x5c>
 8004ce4:	2a25      	cmp	r2, #37	; 0x25
 8004ce6:	d1f9      	bne.n	8004cdc <_svfiprintf_r+0x50>
 8004ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8004cec:	d00b      	beq.n	8004d06 <_svfiprintf_r+0x7a>
 8004cee:	465b      	mov	r3, fp
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	f7ff ff6d 	bl	8004bd4 <__ssputs_r>
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f000 80aa 	beq.w	8004e54 <_svfiprintf_r+0x1c8>
 8004d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d02:	445a      	add	r2, fp
 8004d04:	9209      	str	r2, [sp, #36]	; 0x24
 8004d06:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 80a2 	beq.w	8004e54 <_svfiprintf_r+0x1c8>
 8004d10:	2300      	movs	r3, #0
 8004d12:	f04f 32ff 	mov.w	r2, #4294967295
 8004d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d1a:	f10a 0a01 	add.w	sl, sl, #1
 8004d1e:	9304      	str	r3, [sp, #16]
 8004d20:	9307      	str	r3, [sp, #28]
 8004d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d26:	931a      	str	r3, [sp, #104]	; 0x68
 8004d28:	4654      	mov	r4, sl
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d30:	4851      	ldr	r0, [pc, #324]	; (8004e78 <_svfiprintf_r+0x1ec>)
 8004d32:	f7fb fa5d 	bl	80001f0 <memchr>
 8004d36:	9a04      	ldr	r2, [sp, #16]
 8004d38:	b9d8      	cbnz	r0, 8004d72 <_svfiprintf_r+0xe6>
 8004d3a:	06d0      	lsls	r0, r2, #27
 8004d3c:	bf44      	itt	mi
 8004d3e:	2320      	movmi	r3, #32
 8004d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d44:	0711      	lsls	r1, r2, #28
 8004d46:	bf44      	itt	mi
 8004d48:	232b      	movmi	r3, #43	; 0x2b
 8004d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d52:	2b2a      	cmp	r3, #42	; 0x2a
 8004d54:	d015      	beq.n	8004d82 <_svfiprintf_r+0xf6>
 8004d56:	9a07      	ldr	r2, [sp, #28]
 8004d58:	4654      	mov	r4, sl
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f04f 0c0a 	mov.w	ip, #10
 8004d60:	4621      	mov	r1, r4
 8004d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d66:	3b30      	subs	r3, #48	; 0x30
 8004d68:	2b09      	cmp	r3, #9
 8004d6a:	d94e      	bls.n	8004e0a <_svfiprintf_r+0x17e>
 8004d6c:	b1b0      	cbz	r0, 8004d9c <_svfiprintf_r+0x110>
 8004d6e:	9207      	str	r2, [sp, #28]
 8004d70:	e014      	b.n	8004d9c <_svfiprintf_r+0x110>
 8004d72:	eba0 0308 	sub.w	r3, r0, r8
 8004d76:	fa09 f303 	lsl.w	r3, r9, r3
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	9304      	str	r3, [sp, #16]
 8004d7e:	46a2      	mov	sl, r4
 8004d80:	e7d2      	b.n	8004d28 <_svfiprintf_r+0x9c>
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	1d19      	adds	r1, r3, #4
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	9103      	str	r1, [sp, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bfbb      	ittet	lt
 8004d8e:	425b      	neglt	r3, r3
 8004d90:	f042 0202 	orrlt.w	r2, r2, #2
 8004d94:	9307      	strge	r3, [sp, #28]
 8004d96:	9307      	strlt	r3, [sp, #28]
 8004d98:	bfb8      	it	lt
 8004d9a:	9204      	strlt	r2, [sp, #16]
 8004d9c:	7823      	ldrb	r3, [r4, #0]
 8004d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8004da0:	d10c      	bne.n	8004dbc <_svfiprintf_r+0x130>
 8004da2:	7863      	ldrb	r3, [r4, #1]
 8004da4:	2b2a      	cmp	r3, #42	; 0x2a
 8004da6:	d135      	bne.n	8004e14 <_svfiprintf_r+0x188>
 8004da8:	9b03      	ldr	r3, [sp, #12]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	9203      	str	r2, [sp, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bfb8      	it	lt
 8004db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004db8:	3402      	adds	r4, #2
 8004dba:	9305      	str	r3, [sp, #20]
 8004dbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e88 <_svfiprintf_r+0x1fc>
 8004dc0:	7821      	ldrb	r1, [r4, #0]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	4650      	mov	r0, sl
 8004dc6:	f7fb fa13 	bl	80001f0 <memchr>
 8004dca:	b140      	cbz	r0, 8004dde <_svfiprintf_r+0x152>
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	eba0 000a 	sub.w	r0, r0, sl
 8004dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8004dd6:	9b04      	ldr	r3, [sp, #16]
 8004dd8:	4303      	orrs	r3, r0
 8004dda:	3401      	adds	r4, #1
 8004ddc:	9304      	str	r3, [sp, #16]
 8004dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de2:	4826      	ldr	r0, [pc, #152]	; (8004e7c <_svfiprintf_r+0x1f0>)
 8004de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004de8:	2206      	movs	r2, #6
 8004dea:	f7fb fa01 	bl	80001f0 <memchr>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	d038      	beq.n	8004e64 <_svfiprintf_r+0x1d8>
 8004df2:	4b23      	ldr	r3, [pc, #140]	; (8004e80 <_svfiprintf_r+0x1f4>)
 8004df4:	bb1b      	cbnz	r3, 8004e3e <_svfiprintf_r+0x1b2>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	3307      	adds	r3, #7
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	3308      	adds	r3, #8
 8004e00:	9303      	str	r3, [sp, #12]
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	4433      	add	r3, r6
 8004e06:	9309      	str	r3, [sp, #36]	; 0x24
 8004e08:	e767      	b.n	8004cda <_svfiprintf_r+0x4e>
 8004e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e0e:	460c      	mov	r4, r1
 8004e10:	2001      	movs	r0, #1
 8004e12:	e7a5      	b.n	8004d60 <_svfiprintf_r+0xd4>
 8004e14:	2300      	movs	r3, #0
 8004e16:	3401      	adds	r4, #1
 8004e18:	9305      	str	r3, [sp, #20]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f04f 0c0a 	mov.w	ip, #10
 8004e20:	4620      	mov	r0, r4
 8004e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e26:	3a30      	subs	r2, #48	; 0x30
 8004e28:	2a09      	cmp	r2, #9
 8004e2a:	d903      	bls.n	8004e34 <_svfiprintf_r+0x1a8>
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0c5      	beq.n	8004dbc <_svfiprintf_r+0x130>
 8004e30:	9105      	str	r1, [sp, #20]
 8004e32:	e7c3      	b.n	8004dbc <_svfiprintf_r+0x130>
 8004e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e38:	4604      	mov	r4, r0
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e7f0      	b.n	8004e20 <_svfiprintf_r+0x194>
 8004e3e:	ab03      	add	r3, sp, #12
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	462a      	mov	r2, r5
 8004e44:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <_svfiprintf_r+0x1f8>)
 8004e46:	a904      	add	r1, sp, #16
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f3af 8000 	nop.w
 8004e4e:	1c42      	adds	r2, r0, #1
 8004e50:	4606      	mov	r6, r0
 8004e52:	d1d6      	bne.n	8004e02 <_svfiprintf_r+0x176>
 8004e54:	89ab      	ldrh	r3, [r5, #12]
 8004e56:	065b      	lsls	r3, r3, #25
 8004e58:	f53f af2c 	bmi.w	8004cb4 <_svfiprintf_r+0x28>
 8004e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e5e:	b01d      	add	sp, #116	; 0x74
 8004e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e64:	ab03      	add	r3, sp, #12
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	462a      	mov	r2, r5
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <_svfiprintf_r+0x1f8>)
 8004e6c:	a904      	add	r1, sp, #16
 8004e6e:	4638      	mov	r0, r7
 8004e70:	f000 f87a 	bl	8004f68 <_printf_i>
 8004e74:	e7eb      	b.n	8004e4e <_svfiprintf_r+0x1c2>
 8004e76:	bf00      	nop
 8004e78:	080054b0 	.word	0x080054b0
 8004e7c:	080054ba 	.word	0x080054ba
 8004e80:	00000000 	.word	0x00000000
 8004e84:	08004bd5 	.word	0x08004bd5
 8004e88:	080054b6 	.word	0x080054b6

08004e8c <_printf_common>:
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	4616      	mov	r6, r2
 8004e92:	4699      	mov	r9, r3
 8004e94:	688a      	ldr	r2, [r1, #8]
 8004e96:	690b      	ldr	r3, [r1, #16]
 8004e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bfb8      	it	lt
 8004ea0:	4613      	movlt	r3, r2
 8004ea2:	6033      	str	r3, [r6, #0]
 8004ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	b10a      	cbz	r2, 8004eb2 <_printf_common+0x26>
 8004eae:	3301      	adds	r3, #1
 8004eb0:	6033      	str	r3, [r6, #0]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	0699      	lsls	r1, r3, #26
 8004eb6:	bf42      	ittt	mi
 8004eb8:	6833      	ldrmi	r3, [r6, #0]
 8004eba:	3302      	addmi	r3, #2
 8004ebc:	6033      	strmi	r3, [r6, #0]
 8004ebe:	6825      	ldr	r5, [r4, #0]
 8004ec0:	f015 0506 	ands.w	r5, r5, #6
 8004ec4:	d106      	bne.n	8004ed4 <_printf_common+0x48>
 8004ec6:	f104 0a19 	add.w	sl, r4, #25
 8004eca:	68e3      	ldr	r3, [r4, #12]
 8004ecc:	6832      	ldr	r2, [r6, #0]
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	42ab      	cmp	r3, r5
 8004ed2:	dc26      	bgt.n	8004f22 <_printf_common+0x96>
 8004ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ed8:	1e13      	subs	r3, r2, #0
 8004eda:	6822      	ldr	r2, [r4, #0]
 8004edc:	bf18      	it	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	0692      	lsls	r2, r2, #26
 8004ee2:	d42b      	bmi.n	8004f3c <_printf_common+0xb0>
 8004ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee8:	4649      	mov	r1, r9
 8004eea:	4638      	mov	r0, r7
 8004eec:	47c0      	blx	r8
 8004eee:	3001      	adds	r0, #1
 8004ef0:	d01e      	beq.n	8004f30 <_printf_common+0xa4>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	68e5      	ldr	r5, [r4, #12]
 8004ef6:	6832      	ldr	r2, [r6, #0]
 8004ef8:	f003 0306 	and.w	r3, r3, #6
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	bf08      	it	eq
 8004f00:	1aad      	subeq	r5, r5, r2
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	6922      	ldr	r2, [r4, #16]
 8004f06:	bf0c      	ite	eq
 8004f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f0c:	2500      	movne	r5, #0
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	bfc4      	itt	gt
 8004f12:	1a9b      	subgt	r3, r3, r2
 8004f14:	18ed      	addgt	r5, r5, r3
 8004f16:	2600      	movs	r6, #0
 8004f18:	341a      	adds	r4, #26
 8004f1a:	42b5      	cmp	r5, r6
 8004f1c:	d11a      	bne.n	8004f54 <_printf_common+0xc8>
 8004f1e:	2000      	movs	r0, #0
 8004f20:	e008      	b.n	8004f34 <_printf_common+0xa8>
 8004f22:	2301      	movs	r3, #1
 8004f24:	4652      	mov	r2, sl
 8004f26:	4649      	mov	r1, r9
 8004f28:	4638      	mov	r0, r7
 8004f2a:	47c0      	blx	r8
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d103      	bne.n	8004f38 <_printf_common+0xac>
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f38:	3501      	adds	r5, #1
 8004f3a:	e7c6      	b.n	8004eca <_printf_common+0x3e>
 8004f3c:	18e1      	adds	r1, r4, r3
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	2030      	movs	r0, #48	; 0x30
 8004f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f46:	4422      	add	r2, r4
 8004f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f50:	3302      	adds	r3, #2
 8004f52:	e7c7      	b.n	8004ee4 <_printf_common+0x58>
 8004f54:	2301      	movs	r3, #1
 8004f56:	4622      	mov	r2, r4
 8004f58:	4649      	mov	r1, r9
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	47c0      	blx	r8
 8004f5e:	3001      	adds	r0, #1
 8004f60:	d0e6      	beq.n	8004f30 <_printf_common+0xa4>
 8004f62:	3601      	adds	r6, #1
 8004f64:	e7d9      	b.n	8004f1a <_printf_common+0x8e>
	...

08004f68 <_printf_i>:
 8004f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	7e0f      	ldrb	r7, [r1, #24]
 8004f6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f70:	2f78      	cmp	r7, #120	; 0x78
 8004f72:	4691      	mov	r9, r2
 8004f74:	4680      	mov	r8, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	469a      	mov	sl, r3
 8004f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f7e:	d807      	bhi.n	8004f90 <_printf_i+0x28>
 8004f80:	2f62      	cmp	r7, #98	; 0x62
 8004f82:	d80a      	bhi.n	8004f9a <_printf_i+0x32>
 8004f84:	2f00      	cmp	r7, #0
 8004f86:	f000 80d8 	beq.w	800513a <_printf_i+0x1d2>
 8004f8a:	2f58      	cmp	r7, #88	; 0x58
 8004f8c:	f000 80a3 	beq.w	80050d6 <_printf_i+0x16e>
 8004f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f98:	e03a      	b.n	8005010 <_printf_i+0xa8>
 8004f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f9e:	2b15      	cmp	r3, #21
 8004fa0:	d8f6      	bhi.n	8004f90 <_printf_i+0x28>
 8004fa2:	a101      	add	r1, pc, #4	; (adr r1, 8004fa8 <_printf_i+0x40>)
 8004fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa8:	08005001 	.word	0x08005001
 8004fac:	08005015 	.word	0x08005015
 8004fb0:	08004f91 	.word	0x08004f91
 8004fb4:	08004f91 	.word	0x08004f91
 8004fb8:	08004f91 	.word	0x08004f91
 8004fbc:	08004f91 	.word	0x08004f91
 8004fc0:	08005015 	.word	0x08005015
 8004fc4:	08004f91 	.word	0x08004f91
 8004fc8:	08004f91 	.word	0x08004f91
 8004fcc:	08004f91 	.word	0x08004f91
 8004fd0:	08004f91 	.word	0x08004f91
 8004fd4:	08005121 	.word	0x08005121
 8004fd8:	08005045 	.word	0x08005045
 8004fdc:	08005103 	.word	0x08005103
 8004fe0:	08004f91 	.word	0x08004f91
 8004fe4:	08004f91 	.word	0x08004f91
 8004fe8:	08005143 	.word	0x08005143
 8004fec:	08004f91 	.word	0x08004f91
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	08004f91 	.word	0x08004f91
 8004ff8:	08004f91 	.word	0x08004f91
 8004ffc:	0800510b 	.word	0x0800510b
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	1d1a      	adds	r2, r3, #4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	602a      	str	r2, [r5, #0]
 8005008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800500c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005010:	2301      	movs	r3, #1
 8005012:	e0a3      	b.n	800515c <_printf_i+0x1f4>
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	6829      	ldr	r1, [r5, #0]
 8005018:	0606      	lsls	r6, r0, #24
 800501a:	f101 0304 	add.w	r3, r1, #4
 800501e:	d50a      	bpl.n	8005036 <_printf_i+0xce>
 8005020:	680e      	ldr	r6, [r1, #0]
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	2e00      	cmp	r6, #0
 8005026:	da03      	bge.n	8005030 <_printf_i+0xc8>
 8005028:	232d      	movs	r3, #45	; 0x2d
 800502a:	4276      	negs	r6, r6
 800502c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005030:	485e      	ldr	r0, [pc, #376]	; (80051ac <_printf_i+0x244>)
 8005032:	230a      	movs	r3, #10
 8005034:	e019      	b.n	800506a <_printf_i+0x102>
 8005036:	680e      	ldr	r6, [r1, #0]
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800503e:	bf18      	it	ne
 8005040:	b236      	sxthne	r6, r6
 8005042:	e7ef      	b.n	8005024 <_printf_i+0xbc>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	6029      	str	r1, [r5, #0]
 800504c:	0601      	lsls	r1, r0, #24
 800504e:	d501      	bpl.n	8005054 <_printf_i+0xec>
 8005050:	681e      	ldr	r6, [r3, #0]
 8005052:	e002      	b.n	800505a <_printf_i+0xf2>
 8005054:	0646      	lsls	r6, r0, #25
 8005056:	d5fb      	bpl.n	8005050 <_printf_i+0xe8>
 8005058:	881e      	ldrh	r6, [r3, #0]
 800505a:	4854      	ldr	r0, [pc, #336]	; (80051ac <_printf_i+0x244>)
 800505c:	2f6f      	cmp	r7, #111	; 0x6f
 800505e:	bf0c      	ite	eq
 8005060:	2308      	moveq	r3, #8
 8005062:	230a      	movne	r3, #10
 8005064:	2100      	movs	r1, #0
 8005066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800506a:	6865      	ldr	r5, [r4, #4]
 800506c:	60a5      	str	r5, [r4, #8]
 800506e:	2d00      	cmp	r5, #0
 8005070:	bfa2      	ittt	ge
 8005072:	6821      	ldrge	r1, [r4, #0]
 8005074:	f021 0104 	bicge.w	r1, r1, #4
 8005078:	6021      	strge	r1, [r4, #0]
 800507a:	b90e      	cbnz	r6, 8005080 <_printf_i+0x118>
 800507c:	2d00      	cmp	r5, #0
 800507e:	d04d      	beq.n	800511c <_printf_i+0x1b4>
 8005080:	4615      	mov	r5, r2
 8005082:	fbb6 f1f3 	udiv	r1, r6, r3
 8005086:	fb03 6711 	mls	r7, r3, r1, r6
 800508a:	5dc7      	ldrb	r7, [r0, r7]
 800508c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005090:	4637      	mov	r7, r6
 8005092:	42bb      	cmp	r3, r7
 8005094:	460e      	mov	r6, r1
 8005096:	d9f4      	bls.n	8005082 <_printf_i+0x11a>
 8005098:	2b08      	cmp	r3, #8
 800509a:	d10b      	bne.n	80050b4 <_printf_i+0x14c>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07de      	lsls	r6, r3, #31
 80050a0:	d508      	bpl.n	80050b4 <_printf_i+0x14c>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	6861      	ldr	r1, [r4, #4]
 80050a6:	4299      	cmp	r1, r3
 80050a8:	bfde      	ittt	le
 80050aa:	2330      	movle	r3, #48	; 0x30
 80050ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050b4:	1b52      	subs	r2, r2, r5
 80050b6:	6122      	str	r2, [r4, #16]
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	464b      	mov	r3, r9
 80050be:	aa03      	add	r2, sp, #12
 80050c0:	4621      	mov	r1, r4
 80050c2:	4640      	mov	r0, r8
 80050c4:	f7ff fee2 	bl	8004e8c <_printf_common>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d14c      	bne.n	8005166 <_printf_i+0x1fe>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	b004      	add	sp, #16
 80050d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d6:	4835      	ldr	r0, [pc, #212]	; (80051ac <_printf_i+0x244>)
 80050d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050dc:	6829      	ldr	r1, [r5, #0]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80050e4:	6029      	str	r1, [r5, #0]
 80050e6:	061d      	lsls	r5, r3, #24
 80050e8:	d514      	bpl.n	8005114 <_printf_i+0x1ac>
 80050ea:	07df      	lsls	r7, r3, #31
 80050ec:	bf44      	itt	mi
 80050ee:	f043 0320 	orrmi.w	r3, r3, #32
 80050f2:	6023      	strmi	r3, [r4, #0]
 80050f4:	b91e      	cbnz	r6, 80050fe <_printf_i+0x196>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f023 0320 	bic.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	2310      	movs	r3, #16
 8005100:	e7b0      	b.n	8005064 <_printf_i+0xfc>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	f043 0320 	orr.w	r3, r3, #32
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	2378      	movs	r3, #120	; 0x78
 800510c:	4828      	ldr	r0, [pc, #160]	; (80051b0 <_printf_i+0x248>)
 800510e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005112:	e7e3      	b.n	80050dc <_printf_i+0x174>
 8005114:	0659      	lsls	r1, r3, #25
 8005116:	bf48      	it	mi
 8005118:	b2b6      	uxthmi	r6, r6
 800511a:	e7e6      	b.n	80050ea <_printf_i+0x182>
 800511c:	4615      	mov	r5, r2
 800511e:	e7bb      	b.n	8005098 <_printf_i+0x130>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	6826      	ldr	r6, [r4, #0]
 8005124:	6961      	ldr	r1, [r4, #20]
 8005126:	1d18      	adds	r0, r3, #4
 8005128:	6028      	str	r0, [r5, #0]
 800512a:	0635      	lsls	r5, r6, #24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	d501      	bpl.n	8005134 <_printf_i+0x1cc>
 8005130:	6019      	str	r1, [r3, #0]
 8005132:	e002      	b.n	800513a <_printf_i+0x1d2>
 8005134:	0670      	lsls	r0, r6, #25
 8005136:	d5fb      	bpl.n	8005130 <_printf_i+0x1c8>
 8005138:	8019      	strh	r1, [r3, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	4615      	mov	r5, r2
 8005140:	e7ba      	b.n	80050b8 <_printf_i+0x150>
 8005142:	682b      	ldr	r3, [r5, #0]
 8005144:	1d1a      	adds	r2, r3, #4
 8005146:	602a      	str	r2, [r5, #0]
 8005148:	681d      	ldr	r5, [r3, #0]
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	2100      	movs	r1, #0
 800514e:	4628      	mov	r0, r5
 8005150:	f7fb f84e 	bl	80001f0 <memchr>
 8005154:	b108      	cbz	r0, 800515a <_printf_i+0x1f2>
 8005156:	1b40      	subs	r0, r0, r5
 8005158:	6060      	str	r0, [r4, #4]
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	2300      	movs	r3, #0
 8005160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005164:	e7a8      	b.n	80050b8 <_printf_i+0x150>
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	462a      	mov	r2, r5
 800516a:	4649      	mov	r1, r9
 800516c:	4640      	mov	r0, r8
 800516e:	47d0      	blx	sl
 8005170:	3001      	adds	r0, #1
 8005172:	d0ab      	beq.n	80050cc <_printf_i+0x164>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	079b      	lsls	r3, r3, #30
 8005178:	d413      	bmi.n	80051a2 <_printf_i+0x23a>
 800517a:	68e0      	ldr	r0, [r4, #12]
 800517c:	9b03      	ldr	r3, [sp, #12]
 800517e:	4298      	cmp	r0, r3
 8005180:	bfb8      	it	lt
 8005182:	4618      	movlt	r0, r3
 8005184:	e7a4      	b.n	80050d0 <_printf_i+0x168>
 8005186:	2301      	movs	r3, #1
 8005188:	4632      	mov	r2, r6
 800518a:	4649      	mov	r1, r9
 800518c:	4640      	mov	r0, r8
 800518e:	47d0      	blx	sl
 8005190:	3001      	adds	r0, #1
 8005192:	d09b      	beq.n	80050cc <_printf_i+0x164>
 8005194:	3501      	adds	r5, #1
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	9903      	ldr	r1, [sp, #12]
 800519a:	1a5b      	subs	r3, r3, r1
 800519c:	42ab      	cmp	r3, r5
 800519e:	dcf2      	bgt.n	8005186 <_printf_i+0x21e>
 80051a0:	e7eb      	b.n	800517a <_printf_i+0x212>
 80051a2:	2500      	movs	r5, #0
 80051a4:	f104 0619 	add.w	r6, r4, #25
 80051a8:	e7f5      	b.n	8005196 <_printf_i+0x22e>
 80051aa:	bf00      	nop
 80051ac:	080054c1 	.word	0x080054c1
 80051b0:	080054d2 	.word	0x080054d2

080051b4 <memcpy>:
 80051b4:	440a      	add	r2, r1
 80051b6:	4291      	cmp	r1, r2
 80051b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80051bc:	d100      	bne.n	80051c0 <memcpy+0xc>
 80051be:	4770      	bx	lr
 80051c0:	b510      	push	{r4, lr}
 80051c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051ca:	4291      	cmp	r1, r2
 80051cc:	d1f9      	bne.n	80051c2 <memcpy+0xe>
 80051ce:	bd10      	pop	{r4, pc}

080051d0 <memmove>:
 80051d0:	4288      	cmp	r0, r1
 80051d2:	b510      	push	{r4, lr}
 80051d4:	eb01 0402 	add.w	r4, r1, r2
 80051d8:	d902      	bls.n	80051e0 <memmove+0x10>
 80051da:	4284      	cmp	r4, r0
 80051dc:	4623      	mov	r3, r4
 80051de:	d807      	bhi.n	80051f0 <memmove+0x20>
 80051e0:	1e43      	subs	r3, r0, #1
 80051e2:	42a1      	cmp	r1, r4
 80051e4:	d008      	beq.n	80051f8 <memmove+0x28>
 80051e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ee:	e7f8      	b.n	80051e2 <memmove+0x12>
 80051f0:	4402      	add	r2, r0
 80051f2:	4601      	mov	r1, r0
 80051f4:	428a      	cmp	r2, r1
 80051f6:	d100      	bne.n	80051fa <memmove+0x2a>
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005202:	e7f7      	b.n	80051f4 <memmove+0x24>

08005204 <_free_r>:
 8005204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005206:	2900      	cmp	r1, #0
 8005208:	d044      	beq.n	8005294 <_free_r+0x90>
 800520a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520e:	9001      	str	r0, [sp, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f1a1 0404 	sub.w	r4, r1, #4
 8005216:	bfb8      	it	lt
 8005218:	18e4      	addlt	r4, r4, r3
 800521a:	f000 f913 	bl	8005444 <__malloc_lock>
 800521e:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <_free_r+0x94>)
 8005220:	9801      	ldr	r0, [sp, #4]
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	b933      	cbnz	r3, 8005234 <_free_r+0x30>
 8005226:	6063      	str	r3, [r4, #4]
 8005228:	6014      	str	r4, [r2, #0]
 800522a:	b003      	add	sp, #12
 800522c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005230:	f000 b90e 	b.w	8005450 <__malloc_unlock>
 8005234:	42a3      	cmp	r3, r4
 8005236:	d908      	bls.n	800524a <_free_r+0x46>
 8005238:	6825      	ldr	r5, [r4, #0]
 800523a:	1961      	adds	r1, r4, r5
 800523c:	428b      	cmp	r3, r1
 800523e:	bf01      	itttt	eq
 8005240:	6819      	ldreq	r1, [r3, #0]
 8005242:	685b      	ldreq	r3, [r3, #4]
 8005244:	1949      	addeq	r1, r1, r5
 8005246:	6021      	streq	r1, [r4, #0]
 8005248:	e7ed      	b.n	8005226 <_free_r+0x22>
 800524a:	461a      	mov	r2, r3
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	b10b      	cbz	r3, 8005254 <_free_r+0x50>
 8005250:	42a3      	cmp	r3, r4
 8005252:	d9fa      	bls.n	800524a <_free_r+0x46>
 8005254:	6811      	ldr	r1, [r2, #0]
 8005256:	1855      	adds	r5, r2, r1
 8005258:	42a5      	cmp	r5, r4
 800525a:	d10b      	bne.n	8005274 <_free_r+0x70>
 800525c:	6824      	ldr	r4, [r4, #0]
 800525e:	4421      	add	r1, r4
 8005260:	1854      	adds	r4, r2, r1
 8005262:	42a3      	cmp	r3, r4
 8005264:	6011      	str	r1, [r2, #0]
 8005266:	d1e0      	bne.n	800522a <_free_r+0x26>
 8005268:	681c      	ldr	r4, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	6053      	str	r3, [r2, #4]
 800526e:	4421      	add	r1, r4
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	e7da      	b.n	800522a <_free_r+0x26>
 8005274:	d902      	bls.n	800527c <_free_r+0x78>
 8005276:	230c      	movs	r3, #12
 8005278:	6003      	str	r3, [r0, #0]
 800527a:	e7d6      	b.n	800522a <_free_r+0x26>
 800527c:	6825      	ldr	r5, [r4, #0]
 800527e:	1961      	adds	r1, r4, r5
 8005280:	428b      	cmp	r3, r1
 8005282:	bf04      	itt	eq
 8005284:	6819      	ldreq	r1, [r3, #0]
 8005286:	685b      	ldreq	r3, [r3, #4]
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	bf04      	itt	eq
 800528c:	1949      	addeq	r1, r1, r5
 800528e:	6021      	streq	r1, [r4, #0]
 8005290:	6054      	str	r4, [r2, #4]
 8005292:	e7ca      	b.n	800522a <_free_r+0x26>
 8005294:	b003      	add	sp, #12
 8005296:	bd30      	pop	{r4, r5, pc}
 8005298:	200008e4 	.word	0x200008e4

0800529c <sbrk_aligned>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4e0e      	ldr	r6, [pc, #56]	; (80052d8 <sbrk_aligned+0x3c>)
 80052a0:	460c      	mov	r4, r1
 80052a2:	6831      	ldr	r1, [r6, #0]
 80052a4:	4605      	mov	r5, r0
 80052a6:	b911      	cbnz	r1, 80052ae <sbrk_aligned+0x12>
 80052a8:	f000 f8bc 	bl	8005424 <_sbrk_r>
 80052ac:	6030      	str	r0, [r6, #0]
 80052ae:	4621      	mov	r1, r4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f000 f8b7 	bl	8005424 <_sbrk_r>
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	d00a      	beq.n	80052d0 <sbrk_aligned+0x34>
 80052ba:	1cc4      	adds	r4, r0, #3
 80052bc:	f024 0403 	bic.w	r4, r4, #3
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d007      	beq.n	80052d4 <sbrk_aligned+0x38>
 80052c4:	1a21      	subs	r1, r4, r0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f8ac 	bl	8005424 <_sbrk_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d101      	bne.n	80052d4 <sbrk_aligned+0x38>
 80052d0:	f04f 34ff 	mov.w	r4, #4294967295
 80052d4:	4620      	mov	r0, r4
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	200008e8 	.word	0x200008e8

080052dc <_malloc_r>:
 80052dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	1ccd      	adds	r5, r1, #3
 80052e2:	f025 0503 	bic.w	r5, r5, #3
 80052e6:	3508      	adds	r5, #8
 80052e8:	2d0c      	cmp	r5, #12
 80052ea:	bf38      	it	cc
 80052ec:	250c      	movcc	r5, #12
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	4607      	mov	r7, r0
 80052f2:	db01      	blt.n	80052f8 <_malloc_r+0x1c>
 80052f4:	42a9      	cmp	r1, r5
 80052f6:	d905      	bls.n	8005304 <_malloc_r+0x28>
 80052f8:	230c      	movs	r3, #12
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	2600      	movs	r6, #0
 80052fe:	4630      	mov	r0, r6
 8005300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005304:	4e2e      	ldr	r6, [pc, #184]	; (80053c0 <_malloc_r+0xe4>)
 8005306:	f000 f89d 	bl	8005444 <__malloc_lock>
 800530a:	6833      	ldr	r3, [r6, #0]
 800530c:	461c      	mov	r4, r3
 800530e:	bb34      	cbnz	r4, 800535e <_malloc_r+0x82>
 8005310:	4629      	mov	r1, r5
 8005312:	4638      	mov	r0, r7
 8005314:	f7ff ffc2 	bl	800529c <sbrk_aligned>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	4604      	mov	r4, r0
 800531c:	d14d      	bne.n	80053ba <_malloc_r+0xde>
 800531e:	6834      	ldr	r4, [r6, #0]
 8005320:	4626      	mov	r6, r4
 8005322:	2e00      	cmp	r6, #0
 8005324:	d140      	bne.n	80053a8 <_malloc_r+0xcc>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	4631      	mov	r1, r6
 800532a:	4638      	mov	r0, r7
 800532c:	eb04 0803 	add.w	r8, r4, r3
 8005330:	f000 f878 	bl	8005424 <_sbrk_r>
 8005334:	4580      	cmp	r8, r0
 8005336:	d13a      	bne.n	80053ae <_malloc_r+0xd2>
 8005338:	6821      	ldr	r1, [r4, #0]
 800533a:	3503      	adds	r5, #3
 800533c:	1a6d      	subs	r5, r5, r1
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	4629      	mov	r1, r5
 800534c:	4638      	mov	r0, r7
 800534e:	f7ff ffa5 	bl	800529c <sbrk_aligned>
 8005352:	3001      	adds	r0, #1
 8005354:	d02b      	beq.n	80053ae <_malloc_r+0xd2>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	442b      	add	r3, r5
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	e00e      	b.n	800537c <_malloc_r+0xa0>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	1b52      	subs	r2, r2, r5
 8005362:	d41e      	bmi.n	80053a2 <_malloc_r+0xc6>
 8005364:	2a0b      	cmp	r2, #11
 8005366:	d916      	bls.n	8005396 <_malloc_r+0xba>
 8005368:	1961      	adds	r1, r4, r5
 800536a:	42a3      	cmp	r3, r4
 800536c:	6025      	str	r5, [r4, #0]
 800536e:	bf18      	it	ne
 8005370:	6059      	strne	r1, [r3, #4]
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	bf08      	it	eq
 8005376:	6031      	streq	r1, [r6, #0]
 8005378:	5162      	str	r2, [r4, r5]
 800537a:	604b      	str	r3, [r1, #4]
 800537c:	4638      	mov	r0, r7
 800537e:	f104 060b 	add.w	r6, r4, #11
 8005382:	f000 f865 	bl	8005450 <__malloc_unlock>
 8005386:	f026 0607 	bic.w	r6, r6, #7
 800538a:	1d23      	adds	r3, r4, #4
 800538c:	1af2      	subs	r2, r6, r3
 800538e:	d0b6      	beq.n	80052fe <_malloc_r+0x22>
 8005390:	1b9b      	subs	r3, r3, r6
 8005392:	50a3      	str	r3, [r4, r2]
 8005394:	e7b3      	b.n	80052fe <_malloc_r+0x22>
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	42a3      	cmp	r3, r4
 800539a:	bf0c      	ite	eq
 800539c:	6032      	streq	r2, [r6, #0]
 800539e:	605a      	strne	r2, [r3, #4]
 80053a0:	e7ec      	b.n	800537c <_malloc_r+0xa0>
 80053a2:	4623      	mov	r3, r4
 80053a4:	6864      	ldr	r4, [r4, #4]
 80053a6:	e7b2      	b.n	800530e <_malloc_r+0x32>
 80053a8:	4634      	mov	r4, r6
 80053aa:	6876      	ldr	r6, [r6, #4]
 80053ac:	e7b9      	b.n	8005322 <_malloc_r+0x46>
 80053ae:	230c      	movs	r3, #12
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4638      	mov	r0, r7
 80053b4:	f000 f84c 	bl	8005450 <__malloc_unlock>
 80053b8:	e7a1      	b.n	80052fe <_malloc_r+0x22>
 80053ba:	6025      	str	r5, [r4, #0]
 80053bc:	e7de      	b.n	800537c <_malloc_r+0xa0>
 80053be:	bf00      	nop
 80053c0:	200008e4 	.word	0x200008e4

080053c4 <_realloc_r>:
 80053c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c8:	4680      	mov	r8, r0
 80053ca:	4614      	mov	r4, r2
 80053cc:	460e      	mov	r6, r1
 80053ce:	b921      	cbnz	r1, 80053da <_realloc_r+0x16>
 80053d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d4:	4611      	mov	r1, r2
 80053d6:	f7ff bf81 	b.w	80052dc <_malloc_r>
 80053da:	b92a      	cbnz	r2, 80053e8 <_realloc_r+0x24>
 80053dc:	f7ff ff12 	bl	8005204 <_free_r>
 80053e0:	4625      	mov	r5, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e8:	f000 f838 	bl	800545c <_malloc_usable_size_r>
 80053ec:	4284      	cmp	r4, r0
 80053ee:	4607      	mov	r7, r0
 80053f0:	d802      	bhi.n	80053f8 <_realloc_r+0x34>
 80053f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053f6:	d812      	bhi.n	800541e <_realloc_r+0x5a>
 80053f8:	4621      	mov	r1, r4
 80053fa:	4640      	mov	r0, r8
 80053fc:	f7ff ff6e 	bl	80052dc <_malloc_r>
 8005400:	4605      	mov	r5, r0
 8005402:	2800      	cmp	r0, #0
 8005404:	d0ed      	beq.n	80053e2 <_realloc_r+0x1e>
 8005406:	42bc      	cmp	r4, r7
 8005408:	4622      	mov	r2, r4
 800540a:	4631      	mov	r1, r6
 800540c:	bf28      	it	cs
 800540e:	463a      	movcs	r2, r7
 8005410:	f7ff fed0 	bl	80051b4 <memcpy>
 8005414:	4631      	mov	r1, r6
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fef4 	bl	8005204 <_free_r>
 800541c:	e7e1      	b.n	80053e2 <_realloc_r+0x1e>
 800541e:	4635      	mov	r5, r6
 8005420:	e7df      	b.n	80053e2 <_realloc_r+0x1e>
	...

08005424 <_sbrk_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d06      	ldr	r5, [pc, #24]	; (8005440 <_sbrk_r+0x1c>)
 8005428:	2300      	movs	r3, #0
 800542a:	4604      	mov	r4, r0
 800542c:	4608      	mov	r0, r1
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	f7fc f8aa 	bl	8001588 <_sbrk>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_sbrk_r+0x1a>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_sbrk_r+0x1a>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	200008ec 	.word	0x200008ec

08005444 <__malloc_lock>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__malloc_lock+0x8>)
 8005446:	f000 b811 	b.w	800546c <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	200008f0 	.word	0x200008f0

08005450 <__malloc_unlock>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__malloc_unlock+0x8>)
 8005452:	f000 b80c 	b.w	800546e <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	200008f0 	.word	0x200008f0

0800545c <_malloc_usable_size_r>:
 800545c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005460:	1f18      	subs	r0, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	bfbc      	itt	lt
 8005466:	580b      	ldrlt	r3, [r1, r0]
 8005468:	18c0      	addlt	r0, r0, r3
 800546a:	4770      	bx	lr

0800546c <__retarget_lock_acquire_recursive>:
 800546c:	4770      	bx	lr

0800546e <__retarget_lock_release_recursive>:
 800546e:	4770      	bx	lr

08005470 <_init>:
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005472:	bf00      	nop
 8005474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005476:	bc08      	pop	{r3}
 8005478:	469e      	mov	lr, r3
 800547a:	4770      	bx	lr

0800547c <_fini>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr
